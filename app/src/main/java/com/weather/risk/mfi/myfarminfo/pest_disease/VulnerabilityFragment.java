package com.weather.risk.mfi.myfarminfo.pest_disease;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.os.Bundle;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.text.Html;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.RetryPolicy;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.weather.risk.mfi.myfarminfo.R;
import com.weather.risk.mfi.myfarminfo.entities.DataBean;
import com.weather.risk.mfi.myfarminfo.entities.VillageBean;
import com.weather.risk.mfi.myfarminfo.home.AppController;
import com.weather.risk.mfi.myfarminfo.mapfragments.LatLonCellID;
import com.weather.risk.mfi.myfarminfo.pepsico.DiseaseBean;
import com.weather.risk.mfi.myfarminfo.utils.AppConstant;
import com.weather.risk.mfi.myfarminfo.utils.TransparentProgressDialog;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.util.ArrayList;

/**
 * Created by Admin on 01-09-2017.
 */
@SuppressLint("ValidFragment")
public class VulnerabilityFragment extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String CALLING_ACTIVITY = "callingActivity";
    private static final String FARM_NAME = "FarmName";
    private static final String ALL_POINTS = "AllLatLngPount";
    private static final String AREA = "area";

    // TODO: Rename and change types of parameters
    private int callingActivity;
    private String selectedFarmName;
    private String area;
    String data = null;

    private ProgressBar firstBar = null;
    private ProgressBar secondBar = null;
    String lat = null;
    String lon = null;

    LinearLayout parent;

    ArrayList<VulnerabilityBean> dataList = new ArrayList<VulnerabilityBean>();

    public VulnerabilityFragment(String la, String lo) {
        // Required empty public constructor
        lat = la;
        lon = lo;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    Spinner diseaseSpinner, cropSpinner;

    Button showBTN;
    String d_ID = "2";

    TextView happenText;

    ProgressBar highBar, mediumBar, lowBar;
    TextView highPerText, lowPerText, mediumPerText;
    TextView maxText;
    private String cropArr[];
    private String diseaseArr[];


    String cropName = null;
    String diseaseName = null;
    String cropId = null, diseaseId = null;

    TextView noData;

    Button submitBTN;
    String crop_name = null;


    @Override
    public View onCreateView(final LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.vulnerability, container, false);
        String role = AppConstant.role;
        Log.v("roleeeeeelllll", role + "");

        noData = (TextView) view.findViewById(R.id.nodata);


       /* TextView farmInfo = (TextView) getActivity().findViewById(R.id.logo);
        Typeface tf = Typeface.createFromAsset(getActivity().getAssets(), "fonts/kaushan_script_regular.otf");
        farmInfo.setTypeface(tf);
        farmInfo.setText("Vulnerability");
        farmInfo.setTextColor(Color.WHITE);*/
        String aa = AppConstant.latitude;
        String bb = AppConstant.longitude;
        if (aa != null && bb != null) {

            lat = aa;
            lon = bb;

        }
        if (lat == null) {
            lat = "" + LatLonCellID.lat;
            lon = "" + LatLonCellID.lon;

        }


        parent = (LinearLayout) view.findViewById(R.id.parent);
        parent.setVisibility(View.GONE);
        happenText = (TextView) view.findViewById(R.id.disease_happen_text);
        maxText = (TextView) view.findViewById(R.id.maxText);

        firstBar = (ProgressBar) view.findViewById(R.id.firstBar);
        secondBar = (ProgressBar) view.findViewById(R.id.secondBar);

        highBar = (ProgressBar) view.findViewById(R.id.highBar);
        mediumBar = (ProgressBar) view.findViewById(R.id.mediumBar);
        lowBar = (ProgressBar) view.findViewById(R.id.lowBar);

        highPerText = (TextView) view.findViewById(R.id.highPercent);
        mediumPerText = (TextView) view.findViewById(R.id.mediumPercent);
        lowPerText = (TextView) view.findViewById(R.id.lowPercent);

        firstBar.setMax(100);
        secondBar.setMax(100);
        highBar.setMax(100);
        mediumBar.setMax(100);
        lowBar.setMax(100);


        submitBTN = (Button) view.findViewById(R.id.get_vulnerability);

        submitBTN.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (cropId == null) {
                    Toast.makeText(getActivity(), getResources().getString(R.string.PleaseselectCrop), Toast.LENGTH_SHORT).show();
                } else if (diseaseId == null) {
                    Toast.makeText(getActivity(), getResources().getString(R.string.Pleaseselecthedisease), Toast.LENGTH_SHORT).show();
                } else {
                    loadVulnerabilityData(cropId, diseaseId);
                }
            }
        });

        diseaseSpinner = (Spinner) view.findViewById(R.id.diseaseSpinner);
        cropSpinner = (Spinner) view.findViewById(R.id.cropSpinner);
        showBTN = (Button) view.findViewById(R.id.disease_show_btn);
        showBTN.setVisibility(View.GONE);
        showBTN.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                final Dialog dialog = new Dialog(getActivity());

                dialog.setCanceledOnTouchOutside(true);
                Window window = dialog.getWindow();
                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);


                WindowManager.LayoutParams wlp = window.getAttributes();

                wlp.gravity = Gravity.BOTTOM;
                wlp.dimAmount = 0.5f;

                dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
                // wlp.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;
                window.setAttributes(wlp);
                // Include dialog.xml file
                dialog.setContentView(R.layout.show_data_popup);
                window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);


                dialog.show();

                final ImageView cancel = (ImageView) dialog.findViewById(R.id.cancel_popup);
                final RecyclerView recyclerView = (RecyclerView) dialog.findViewById(R.id.showDataListView);
                LinearLayoutManager llm = new LinearLayoutManager(getActivity());
                llm.setOrientation(LinearLayoutManager.VERTICAL);
                recyclerView.setLayoutManager(llm);
                ShowAdapter adapter = new ShowAdapter(getActivity(), dataList);
                recyclerView.setAdapter(adapter);
                cancel.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        dialog.cancel();
                    }
                });

            }
        });

        loadCropData();

        return view;
    }


    @Override
    public void onResume() {
        super.onResume();

    }

    TransparentProgressDialog dialog;

    public void loadVulnerabilityData(String cId, String dId) {
        dialog = new TransparentProgressDialog(getActivity(),
                getResources().getString(R.string.Dataisloading));
        dialog.show();

        Log.v("Get Vulnerability", "https://myfarminfo.com/yfirest.svc/Disease/Advice/" + lat + "/" + lon + "/" + cId + "/" + dId + "/India");

        StringRequest stringRequest = new StringRequest(Request.Method.GET, "https://myfarminfo.com/yfirest.svc/Disease/Advice/" + lat + "/" + lon + "/" + cId + "/" + dId + "/India",
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        dialog.cancel();
                        // Display the first 500 characters of the response string.


                        response = response.trim();
                        response = response.substring(1, response.length() - 1);
                        response = response.replace("\\", "");
                        response = response.replace("\"{", "{");
                        response = response.replace("}\"", "}");
                        System.out.println("Vulnerability Response : " + response);
                        try {

                            if (response.equalsIgnoreCase("InsufData")) {

                                noData.setVisibility(View.VISIBLE);
                                parent.setVisibility(View.GONE);

                            } else {
                                noData.setVisibility(View.GONE);
                                parent.setVisibility(View.VISIBLE);

                                JSONObject jsonObject = new JSONObject(response);
                                JSONObject jb = jsonObject.getJSONObject("ss");
                                String maximumText = jb.getString("Str1");
                                maxText.setText(Html.fromHtml(maximumText));

                                JSONArray jsonArray = jsonObject.getJSONArray("dataTable");
                                if (jsonArray.length() > 0) {
                                    JSONObject jsonObject1 = jsonArray.getJSONObject(0);
                                    String firstProgress = jsonObject1.getString("Chance_Freq");
                                    String secondProgress = jsonObject1.getString("Severity_TypeFreq");

                                    String highProg = jsonObject1.getString("Severity_HighFreq");
                                    String mediumProg = jsonObject1.getString("Severity_MediumFreq");
                                    String lowProg = jsonObject1.getString("Severity_LowFreq");

                                    if (firstProgress != null) {

                                        Double f = Double.valueOf(firstProgress);

                                        firstBar.setProgress(f.intValue());
                                        happenText.setText(getResources().getString(R.string.Diseasehashappenedin) + " " + f.intValue() + "% " + getResources().getString(R.string.ofthisyears));
                                    }

                                    if (secondProgress != null) {
                                        Double f = Double.valueOf(secondProgress);
                                        secondBar.setProgress(f.intValue());
                                    }

                                    if (highProg != null) {
                                        Double f = Double.valueOf(highProg);
                                        highBar.setProgress(f.intValue());
                                        highPerText.setText(f.intValue() + "%");
                                    }

                                    if (mediumProg != null) {
                                        Double f = Double.valueOf(mediumProg);
                                        mediumBar.setProgress(f.intValue());
                                        mediumPerText.setText(f.intValue() + "%");
                                    }

                                    if (lowProg != null) {
                                        Double f = Double.valueOf(lowProg);
                                        lowBar.setProgress(f.intValue());
                                        lowPerText.setText(f.intValue() + "%");
                                    }
                                }

                                dataList = new ArrayList<VulnerabilityBean>();
                                JSONArray jA = jsonObject.getJSONArray("dataTable2");
                                for (int i = 0; i < jA.length(); i++) {
                                    VulnerabilityBean bean = new VulnerabilityBean();
                                    bean.setDate(jA.getJSONObject(i).getString("Date"));
                                    bean.setMaxTem(jA.getJSONObject(i).getString("MaxTemp"));
                                    bean.setMinTemp(jA.getJSONObject(i).getString("MinTemp"));

                                    bean.setRain(jA.getJSONObject(i).getString("Rain"));
                                    bean.setHumidityEve(jA.getJSONObject(i).getString("HumidityEve"));
                                    bean.setHimidityMor(jA.getJSONObject(i).getString("HumidityMor"));
                                    dataList.add(bean);
                                }

                                if (dataList.size() > 0) {

                                    showBTN.setVisibility(View.VISIBLE);
                                }
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                dialog.cancel();
                System.out.println("Volley Error : " + error);
                parent.setVisibility(View.GONE);
                Toast.makeText(getActivity(), getResources().getString(R.string.Nodataavailable), Toast.LENGTH_SHORT).show();
            }
        });

        int socketTimeout = 60000;//60 seconds - change to what you want
        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
        stringRequest.setRetryPolicy(policy);

        // Adding request to volley request queue
        AppController.getInstance().addToRequestQueue(stringRequest);
    }


    public void loadCropData() {
        final TransparentProgressDialog dialoug = new TransparentProgressDialog(getActivity(),
                getResources().getString(R.string.Dataisloading));
        dialoug.show();

        Log.v("cropUrl", "https://myfarminfo.com/yfirest.svc/Disease/Crops");

        StringRequest stringRequest = new StringRequest(Request.Method.GET, "https://myfarminfo.com/yfirest.svc/Disease/Crops/" + AppConstant.user_id,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        dialoug.cancel();
                        // Display the first 500 characters of the response string.
                        System.out.println("Volley crop Response : " + response);

                        response = response.trim();
                        response = response.substring(1, response.length() - 1);
                        response = response.replace("\\", "");


                        DataBean bean = new DataBean();
                        bean = getCropTypeList(response);
                        ArrayList<CropBean> cityList = new ArrayList<CropBean>();
                        cityList = bean.getCropList();
                        cropArr = new String[cityList.size() + 1];
                        cropArr[0] = "select crop";
                        for (int i = 0; i < cityList.size(); i++) {
                            cropArr[i + 1] = cityList.get(i).getCropName();

                            String na = cityList.get(i).getCropName();
                            String id = cityList.get(i).getCropId();
                            String compareValue = AppConstant.selected_cropId;
                            if (compareValue != null && compareValue.equalsIgnoreCase(id)) {
                                crop_name = na;
                            }
                        }

                        ArrayAdapter<String> eventTypeAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, cropArr);
                        eventTypeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

                        cropSpinner.setAdapter(eventTypeAdapter);

                        if (crop_name != null) {
                            int spinnerPosition = eventTypeAdapter.getPosition(crop_name);
                            cropSpinner.setSelection(spinnerPosition);
                        } else {
                            noCropFound(crop_name);
                        }

                        final DataBean finalBean = bean;
                        cropSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                            @Override
                            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

                                if (position > 0) {
                                    cropId = finalBean.getCropList().get(position - 1).getCropId();
                                    cropName = finalBean.getCropList().get(position - 1).getCropName();

                                    loadDiseaseData(cropId);

                                } else {
                                    cropId = null;
                                    cropName = null;

                                    String cropId1 = AppConstant.selected_cropId;
                                    String variety = AppConstant.selected_variety;

                                    cropId = cropId1;

                                    Log.v("bestmandi_crop", cropId1 + "---" + variety);

                                    if (cropId1 != null) {
                                        loadDiseaseData(cropId1);
                                    } else {
                                        Toast.makeText(getActivity(), getResources().getString(R.string.Youdidnotselectedanycrop), Toast.LENGTH_SHORT).show();
                                    }
                                }
                            }

                            @Override
                            public void onNothingSelected(AdapterView<?> parent) {

                            }
                        });

                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                dialoug.cancel();
                System.out.println("Volley Error : " + error);
            }
        });

        int socketTimeout = 60000;//60 seconds - change to what you want
        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
        stringRequest.setRetryPolicy(policy);

        // Adding request to volley request queue
        AppController.getInstance().addToRequestQueue(stringRequest);
    }


    public DataBean getCropTypeList(String response) {

        DataBean dataBean = new DataBean();
        ArrayList<CropBean> cropTypeList = new ArrayList<CropBean>();
        if (response != null) {
            try {
                JSONArray jsonArray = new JSONArray(response);
                if (jsonArray.length() > 0) {
                }
                for (int i = 0; i < jsonArray.length(); i++) {

                    CropBean typeBean = new CropBean();
                    typeBean.setCropName(jsonArray.getJSONObject(i).getString("CropName"));
                    typeBean.setCropId(jsonArray.getJSONObject(i).getString("CropID"));
                    cropTypeList.add(typeBean);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            dataBean.setCropList(cropTypeList);
        }

        return dataBean;
    }


    public void loadDiseaseData(final String ID) {
        final TransparentProgressDialog dialoug = new TransparentProgressDialog(getActivity(),
                getResources().getString(R.string.Dataisloading));
        dialoug.show();
        Log.v("DiseaseUrl", "https://myfarminfo.com/yfirest.svc/Disease/Cropwise/" + ID);

        StringRequest stringRequest = new StringRequest(Request.Method.GET, "https://myfarminfo.com/yfirest.svc/Disease/Cropwise/" + ID,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        dialoug.cancel();
                        // Display the first 500 characters of the response string.
                        System.out.println("Volley Disease Response : " + response);

                        response = response.trim();
                        response = response.substring(1, response.length() - 1);
                        response = response.replace("\\", "");


                        DataBean bean = new DataBean();
                        bean = getDiseaseTypeList(response);
                        ArrayList<DisBean> disList = new ArrayList<DisBean>();
                        disList = bean.getDiseaseList();
                        diseaseArr = new String[disList.size()];
                        // diseaseArr[0] = "select disease";
                        for (int i = 0; i < disList.size(); i++) {
                            diseaseArr[i] = disList.get(i).getDisName();
                        }

                        ArrayAdapter<String> eventTypeAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, diseaseArr);
                        eventTypeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

                        diseaseSpinner.setAdapter(eventTypeAdapter);

                        final DataBean finalBean = bean;
                        diseaseSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                            @Override
                            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                                if (position >= 0) {
                                    diseaseId = finalBean.getDiseaseList().get(position).getDisId();
                                    diseaseName = finalBean.getDiseaseList().get(position).getDisName();

                                    loadVulnerabilityData(ID, diseaseId);
                                } else {
                                    diseaseId = null;
                                    diseaseName = null;
                                }
                            }

                            @Override
                            public void onNothingSelected(AdapterView<?> parent) {

                            }
                        });

                        if (diseaseArr.length < 2) {
                            Toast.makeText(getActivity(), getResources().getString(R.string.Diseaseisnotfound), Toast.LENGTH_SHORT).show();
                        }

                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                dialoug.cancel();
                System.out.println("Volley Error : " + error);
            }
        });

        int socketTimeout = 60000;//60 seconds - change to what you want
        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
        stringRequest.setRetryPolicy(policy);

        // Adding request to volley request queue
        AppController.getInstance().addToRequestQueue(stringRequest);
    }


    public DataBean getDiseaseTypeList(String response) {

        DataBean dataBean = new DataBean();
        ArrayList<DisBean> disTypeList = new ArrayList<DisBean>();
        if (response != null) {
            try {
                JSONArray jsonArray = new JSONArray(response);
                if (jsonArray.length() > 0) {
                }
                for (int i = 0; i < jsonArray.length(); i++) {
                    DisBean typeBean = new DisBean();
                    typeBean.setDisName(jsonArray.getJSONObject(i).getString("Name"));
                    typeBean.setDisId(jsonArray.getJSONObject(i).getString("DiseaseID"));
                    disTypeList.add(typeBean);
                }

            } catch (JSONException e) {
                e.printStackTrace();
            }

            dataBean.setDiseaseList(disTypeList);
        }

        return dataBean;
    }


    public void noCropFound(String crop_nam) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setMessage(getResources().getString(R.string.Vulnerabilityisnotfound))
                .setCancelable(false)
                .setPositiveButton(getResources().getString(R.string.Ok), new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        dialog.cancel();
                    }
                });

        AlertDialog alert = builder.create();
        alert.show();
    }

}