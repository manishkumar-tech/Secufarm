package com.weather.risk.mfi.myfarminfo.activities;import android.Manifest;import android.annotation.SuppressLint;import android.app.Dialog;import android.app.ProgressDialog;import android.content.ActivityNotFoundException;import android.content.ComponentName;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.res.Resources;import android.database.Cursor;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Environment;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.view.ContextThemeWrapper;import androidx.appcompat.widget.Toolbar;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.LinearLayoutManager;import android.util.Log;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.RetryPolicy;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.google.firebase.analytics.FirebaseAnalytics;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.gson.JsonObject;import com.google.gson.JsonParser;import com.weather.risk.mfi.myfarminfo.R;import com.weather.risk.mfi.myfarminfo.database.DBAdapter;import com.weather.risk.mfi.myfarminfo.database.State_Crop_StateDistr_Project_download;import com.weather.risk.mfi.myfarminfo.databinding.PopCattledetailsBinding;import com.weather.risk.mfi.myfarminfo.entities.AllFarmDetail;import com.weather.risk.mfi.myfarminfo.entities.CropQueryData;import com.weather.risk.mfi.myfarminfo.entities.SignInData;import com.weather.risk.mfi.myfarminfo.firebasenotification.NotificationCountSMS;import com.weather.risk.mfi.myfarminfo.home.AppController;import com.weather.risk.mfi.myfarminfo.home.EditFarmActivity;import com.weather.risk.mfi.myfarminfo.home.PollReceiver;import com.weather.risk.mfi.myfarminfo.mapfragments.LatLonCellID;import com.weather.risk.mfi.myfarminfo.marketplace.AddFarmOnMap_New;import com.weather.risk.mfi.myfarminfo.menu.IconizedMenu;import com.weather.risk.mfi.myfarminfo.utils.AppConstant;import com.weather.risk.mfi.myfarminfo.utils.AppManager;import com.weather.risk.mfi.myfarminfo.utils.LocationPollReceiver;import com.weather.risk.mfi.myfarminfo.utils.TransparentProgressDialog;import com.weather.risk.mfi.myfarminfo.utils.UtilFonts;import com.weather.risk.mfi.myfarminfo.utils.Utility;import com.weather.risk.mfi.myfarminfo.youtubevideostream.YoutubeVideoRecyclerView;import com.weather.risk.mfi.myfarminfo.youtubevideostream.YoutubeWebview;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.conn.params.ConnManagerParams;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.jsoup.Jsoup;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.math.BigInteger;import java.net.MalformedURLException;import java.net.URI;import java.net.URL;import java.net.URLConnection;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Locale;import java.util.regex.Matcher;import java.util.regex.Pattern;//import me.leolin.shortcutbadger.ShortcutBadger;import static com.weather.risk.mfi.myfarminfo.utils.AppConstant.AndroidDevice_IMEI;import static com.weather.risk.mfi.myfarminfo.utils.AppConstant.SN_NewHomeScreen;import static com.weather.risk.mfi.myfarminfo.utils.AppConstant.SelectedLanguageValue;import static com.weather.risk.mfi.myfarminfo.utils.AppConstant.ServiceScreenJSON;import static com.weather.risk.mfi.myfarminfo.utils.AppConstant.checkScreenComingfromLanguageSelectionorNot;import static com.weather.risk.mfi.myfarminfo.utils.Utility.OldFiledelete;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getCheckDate;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getDate;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getDeviceIMEI;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getDynamicLanguageToast;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getDynamicLanguageValue;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getUIDforScreenTracking;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getdate;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setDynamicLanguage;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setDynamicLanguagevale;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setFontsStyleTxt;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setScreenTracking;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setToastPleaseselectyour;/** * Created by Admin on 17-02-2018. */public class NewHomeScreen extends AppCompatActivity {    public static boolean status = true;    public static String syncFor = AppConstant.STATE_ID;    Context context = this;    DBAdapter db;    SharedPreferences prefs = null, prefs1 = null, prefs_token = null, prefs_once = null;    int MULTIPLE_PERMISSIONS = 8;    String[] permissions = {            Manifest.permission.ACCESS_COARSE_LOCATION,            Manifest.permission.ACCESS_FINE_LOCATION,            Manifest.permission.WRITE_EXTERNAL_STORAGE,            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.CALL_PHONE,            Manifest.permission.READ_PHONE_STATE,            Manifest.permission.SEND_SMS,            Manifest.permission.CAMERA    };    String newVersion = null;//    private Menu menu;//    private Toolbar toolbar;    FirebaseAnalytics firebaseAnalytics;    String UID = "";    //    TextView txt_myfarm;    TextView txt_Locatethefarm;    //    RadioGroup rg_languages;    CheckBox rb_English, rb_Hindi, rb_Marathi, rb_Gujarati, rb_Bengali, rb_Tamil;    ImageView imgview_next;    static String selectedlanguages = "english";    ImageView menutool;    TextView txtVersion;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.newhomescreen);        checkPermissions();        setIdDefine();        if (prefs1 == null) {            prefs1 = getSharedPreferences("version", MODE_PRIVATE);        }        AndroidDevice_IMEI = getDeviceIMEI(this);        firebaseAnalytics = FirebaseAnalytics.getInstance(this);//        sendUserIdtoFirebaseAccount(firebaseAnalytics, this);        //initialize the Languages Selection        SelectedLanguageValue = new HashMap<String, String>();        //List of Package//        List<PackageInfo> apps = getPackageManager().getInstalledPackages(0);        String saved_major1 = prefs1.getString("major", null);        if (saved_major1 == null) {            SharedPreferences.Editor editor = prefs1.edit();            editor.putString("major", "4");            editor.putString("minor", "6");            editor.putString("build", "8");            editor.apply();        }        db = new DBAdapter(this);        prefs = getSharedPreferences(AppConstant.SHARED_PREFRENCE_NAME, MODE_PRIVATE);        prefs_token = getSharedPreferences(AppConstant.SHARED_PREFRENCE_NAME_Token, MODE_PRIVATE);        AppConstant.RegisterDeviceTokenKey = prefs_token.getString("RegisterDeviceTokenKey", null);        AppConstant.CheckRegisterDeviceTokenKey = prefs_token.getString("CheckRegisterDeviceTokenKey", null);        NotificationCountSMS.getNotificationCount(this);//        int badgeCount = 1;//        ShortcutBadger.applyCount(context, badgeCount); //for 1.1.4+//        ShortcutBadger.with(getApplicationContext()).count(badgeCount); //for 1.1.3        setRadioButtonClick(rb_English, "english");        setRadioButtonClick(rb_Hindi, "hindi");        setRadioButtonClick(rb_Marathi, "marathi");        setRadioButtonClick(rb_Gujarati, "gujarati");        setRadioButtonClick(rb_Bengali, "bengali");        setRadioButtonClick(rb_Tamil, "tamil");//        setRadioButtonBG("english");        imgview_next.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (selectedlanguages != null && selectedlanguages.length() > 0) {                    checkScreenComingfromLanguageSelectionorNot = true;//                    setButtonlistener(selectedlanguages);                    Intent in = new Intent(getApplicationContext(), LoginWithOtp_New.class);                    startActivity(in);                    finish();                }            }        });        menutool.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showPopUpMenu(v);            }        });        db.open();//        backup();//        Cursor cursor = db.getAllStates();//        State_Crop_StateDistr_Project_download state_crop_stateDistrProjectdownload = new State_Crop_StateDistr_Project_download(NewHomeScreen.this);//        if (!(cursor.getCount() > 0)) {//            try {//                state_crop_stateDistrProjectdownload.loadData();//            } catch (Exception ex) {//                ex.printStackTrace();//            }//        }        Cursor getAllUser = db.getAllCredentials();        if (getAllUser.getCount() > 0) {            getAllUser.moveToFirst();            do {                System.out.println("User Name : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.USER_NAME)));                System.out.println("Visible Name : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.VISIBLE_NAME)));                System.out.println("Password : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.PASSWORD)));                System.out.println("Email : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.EMAIL_ADDRESS)));                System.out.println("Created Date Time : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.CREATED_DATE_TIME)));                System.out.println("User id : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.USER_ID)));                System.out.println("Sending Status : " + getAllUser.getString(getAllUser.getColumnIndex(DBAdapter.SENDING_STATUS)));            } while (getAllUser.moveToNext());        }        db.close();        LocationPollReceiver.scheduleAlarms(NewHomeScreen.this);        PollReceiver.scheduleAlarms(this);        prefs = getSharedPreferences(AppConstant.SHARED_PREFRENCE_NAME, MODE_PRIVATE);        AppConstant.mobile_no = prefs.getString(AppConstant.PREFRENCE_KEY_MOBILE, "1234567890");        AppConstant.role = prefs.getString(AppConstant.PREFRENCE_KEY_ROLE, null);        AppConstant.dashboard = prefs.getString(AppConstant.PREFRENCE_KEY_DASHBOARD, "");        AppConstant.isSubdistrict = prefs.getString(AppConstant.PREFRENCE_KEY_IS_SUB_DISTRICT, "No");        AppConstant.isAgronimist = prefs.getString(AppConstant.PREFRENCE_KEY_IS_AGRONOMIST, "No");        AppConstant.userTypeID = prefs.getString(AppConstant.PREFRENCE_KEY_IS_USERTYPEID, null);        AppConstant.client_name = prefs.getString(AppConstant.PREFRENCE_KEY_CLIENT_NAME, "");        AppConstant.baseID = prefs.getString(AppConstant.PREFRENCE_KEY_BASE_USER_ID, "0");        AppConstant.selected_crop = prefs.getString(AppConstant.PREFRENCE_KEY_IS_CROP, "Cotton");        AppConstant.selected_cropId = prefs.getString(AppConstant.PREFRENCE_KEY_IS_CROP_ID, "12");        AppConstant.selected_district = prefs.getString("district_s", null);        AppConstant.selected_village = prefs.getString("village_s", null);        AppConstant.selected_farm = prefs.getString("farm_s", null);        AppConstant.user_id = prefs.getString(AppConstant.PREFRENCE_KEY_USER_ID, null);        System.out.println("Got User id Home : " + AppConstant.user_id);        boolean isLogin = prefs.getBoolean(AppConstant.PREFRENCE_KEY_ISLOGIN, false);        AppConstant.isLogin = isLogin;        if (isLogin) {            AppConstant.user_id = prefs.getString(AppConstant.PREFRENCE_KEY_USER_ID, null);            System.out.println("Got User id Home : " + AppConstant.user_id);            AppConstant.visible_Name = prefs.getString(AppConstant.PREFRENCE_KEY_VISIBLE_NAME, "Demo");            AppConstant.mobile_no = prefs.getString(AppConstant.PREFRENCE_KEY_MOBILE, "1234567890");            if (AppConstant.visible_Name == null ||                    AppConstant.visible_Name.equalsIgnoreCase("null")            ) {                AppConstant.visible_Name = "";            }//            Intent in = new Intent(getApplicationContext(), LoginWithOtp_New.class);//            startActivity(in);//            finish();        } else {            AppConstant.user_id = prefs.getString(AppConstant.PREFRENCE_KEY_USER_ID, null);            System.out.println("Got User id Home : " + AppConstant.user_id);            AppConstant.visible_Name = prefs.getString(AppConstant.PREFRENCE_KEY_VISIBLE_NAME, "");            AppConstant.mobile_no = prefs.getString(AppConstant.PREFRENCE_KEY_MOBILE, "");            if (AppConstant.visible_Name == null ||                    AppConstant.visible_Name.equalsIgnoreCase("null")            ) {                AppConstant.visible_Name = "";            }        }        db.open();        //Check Column for Farm Registration 25-11-2020//        db.checktableAllFarmDetail();        //Check table exist or not for Image Crop Scheduler//        db.checktableImageLocalStorage();        //Check table exist or not for YoutubeVideoDateTime//        db.checktableYoutubeVideoDateTime();        //Check table exist or not for tblPlantdocLocalSMS//        db.checktabletblPlantdocLocalSMS();        //Check table exist or not for eventlogerror 2020-01-18//        db.checktabletblEventLog();        //Check Market Place 2021-02-09//        db.checktabletblCart();        //20210813        db.checkLocalTranslation();//        String SQL = "Select MyKey,English from tblLocalTranslation where English !='' order by MyKey";//        getSelectedLanguages(SQL);//        if (SelectedLanguageValue == null || SelectedLanguageValue.size() == 0) {//            downloadLocalTranslation();//        }        //App ersion Checking        new GetVersionCode().execute();//        String manufacturer = "xiaomi";//        if (manufacturer.equalsIgnoreCase(android.os.Build.MANUFACTURER)) {//            //this will open auto start screen where user can enable permission for your app//            Intent intent1 = new Intent();//            intent1.setComponent(new ComponentName("com.miui.securitycenter", "com.miui.permcenter.autostart.AutoStartManagementActivity"));//            startActivity(intent1);//        }//        try {//            String sql = "Select count(*) from " + TABLE_SCREENTRACKING + "";//            int count = db.getMaxRecord(sql);//            if (count > 0) {//                //Uploading Screen Tracking Data//                checkScreenTracking(this, db);//            }//        } catch (Exception ex) {//            ex.printStackTrace();//        }//        //Upload Eventload file//        try {//            String sql = "Select count(*) from " + TABLE_tblEventLogError + "";//            int count = db.getMaxRecord(sql);//            if (count > 0) {//                //Uploading vent Log Error//                getUploadLocalFile(db, this);//            }//        } catch (Exception ex) {//            ex.printStackTrace();//        }        //ScreenTracking        UID = getUIDforScreenTracking();        if (db != null) {            setScreenTracking(this, db, SN_NewHomeScreen, UID);        }        OldFiledelete(db, 1);        Bundle bundle = getIntent().getExtras();      //  checkDailyLogin();     // String test=  prefs.getString(getResources().getString(R.string.language_pref_key),"");        prefs_once = getSharedPreferences(AppConstant.SHARED_PREFRENCE_ONCE, MODE_PRIVATE);       prefs.edit().putString(getResources().getString(R.string.language_pref_key),prefs_once.getString("langkey","1")).commit();        if(prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("1")){            selectedlanguages = "english";            setRadioButtonBG(selectedlanguages);            setButtonlistener(selectedlanguages);        }else if(prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("2")){            selectedlanguages = "hindi";            setRadioButtonBG(selectedlanguages);            setButtonlistener(selectedlanguages);        }else if(prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("3")){            selectedlanguages = "gujarati";            setRadioButtonBG(selectedlanguages);            setButtonlistener(selectedlanguages);        }else if(prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("4")){            selectedlanguages = "marathi";            setRadioButtonBG(selectedlanguages);            setButtonlistener(selectedlanguages);        }else if(prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("5")){            selectedlanguages = "bengali";            setRadioButtonBG(selectedlanguages);            setButtonlistener(selectedlanguages);        }else if(prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("6")){            selectedlanguages = "tamil";            setRadioButtonBG(selectedlanguages);            setButtonlistener(selectedlanguages);        }        //prefs_once.edit().putBoolean("FirstTime",true).commit();        if(prefs_once.getBoolean("FirstTime",true) == true ){           // if (prefs.getString(getResources().getString(R.string.language_pref_key),"").equals("")) {            prefs_once.edit().putBoolean("FirstTime",false).commit();                downloadLocalTranslation();//                setRadioButtonBG(selectedlanguages);//                setButtonlistener(selectedlanguages);                prefs_once.edit().putString("langkey","1").commit();          //  }        }else{            CheckNotification(bundle);        }    }    private void checkPermissions() {        int result;        List<String> listPermissionsNeeded = new ArrayList<>();        for (String p : permissions) {            result = ContextCompat.checkSelfPermission(this, p);            if (result != PackageManager.PERMISSION_GRANTED) {                listPermissionsNeeded.add(p);            }        }        if (!listPermissionsNeeded.isEmpty()) {            ActivityCompat.requestPermissions(this, listPermissionsNeeded.toArray(new String[listPermissionsNeeded.size()]), MULTIPLE_PERMISSIONS);        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String permissionsList[], int[] grantResults) {        switch (requestCode) {            case 6:                if (grantResults.length > 0) {                    String permissionsDenied = "";                    for (String per : permissionsList) {                        if (grantResults[0] == PackageManager.PERMISSION_DENIED) {                            permissionsDenied += "\n" + per;                        }                    }                }                break;        }    }    @Override    public boolean dispatchTouchEvent(MotionEvent event) {        View view = getCurrentFocus();        boolean ret = super.dispatchTouchEvent(event);        if (view instanceof EditText) {            View w = getCurrentFocus();            int scrcoords[] = new int[2];            w.getLocationOnScreen(scrcoords);            float x = event.getRawX() + w.getLeft() - scrcoords[0];            float y = event.getRawY() + w.getTop() - scrcoords[1];            if (event.getAction() == MotionEvent.ACTION_UP                    && (x < w.getLeft() || x >= w.getRight()                    || y < w.getTop() || y > w.getBottom())) {                try {                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                    imm.hideSoftInputFromWindow(getWindow().getCurrentFocus().getWindowToken(), 0);                } catch (Exception e) {                    // TODO: handle exception                }            }        }        return ret;    }    public void APKVersionUpdatePopUp() {        final Dialog dialog = new Dialog(this);        // hide to default title for Dialog        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        // inflate the layout dialog_layout.xml and set it as contentView        LayoutInflater inflater = (LayoutInflater) this                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.dialog_confirmation, null, false);        dialog.setCanceledOnTouchOutside(true);        dialog.setContentView(view);        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(0));        Button btnCancel = (Button) dialog.findViewById(R.id.btnCancel);        Button btnUpdate = (Button) dialog.findViewById(R.id.btnUpdate);        btnUpdate.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + getPackageName())));                } catch (ActivityNotFoundException anfe) {                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + getPackageName())));                } catch (Exception ex) {                    ex.printStackTrace();                }                dialog.dismiss();            }        });        btnCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        // Display the dialog        dialog.show();    }    public void setLanguages(int flag) {//        SharedPreferences myPreference = getSharedPreferences(AppConstant.SHARED_PREFRENCE_NAME, MODE_PRIVATE);        SharedPreferences.Editor ed = prefs.edit();        String SQL = "Select MyKey,English from tblLocalTranslation where English !='' order by MyKey";        switch (flag) {            case 1://hindi                ed.putString(getResources().getString(R.string.language_pref_key), "2");                prefs_once.edit().putString("langkey","2").commit();                SQL = "Select MyKey,Hindi from tblLocalTranslation where Hindi !='' order by MyKey";                break;            case 2://english                ed.putString(getResources().getString(R.string.language_pref_key), "1");                prefs_once.edit().putString("langkey","1").commit();                SQL = "Select MyKey,English from tblLocalTranslation where English !='' order by MyKey";                break;            case 3://gujarati                ed.putString(getResources().getString(R.string.language_pref_key), "3");                prefs_once.edit().putString("langkey","3").commit();                SQL = "Select MyKey,Gujarati from tblLocalTranslation where Gujarati !='' order by MyKey";                break;            case 4://marathi                ed.putString(getResources().getString(R.string.language_pref_key), "4");                prefs_once.edit().putString("langkey","4").commit();                SQL = "Select MyKey,Marathi from tblLocalTranslation where Marathi !='' order by MyKey";                break;            case 5://bengali                ed.putString(getResources().getString(R.string.language_pref_key), "5");                prefs_once.edit().putString("langkey","5").commit();                SQL = "Select MyKey,Bengali from tblLocalTranslation where Bengali !='' order by MyKey";                break;            case 6://tamil                ed.putString(getResources().getString(R.string.language_pref_key), "6");                prefs_once.edit().putString("langkey","6").commit();                SQL = "Select MyKey,Telugu from tblLocalTranslation where Telugu !='' order by MyKey";                break;        }        ed.apply();        getSelectedLanguages(SQL);        AppManager.getInstance().setLanguages(flag, NewHomeScreen.this);        txtVersion.setText(getResources().getString(R.string.VersionLang));//        Intent in = new Intent(getApplicationContext(), LoginWithOtp_New.class);//        startActivity(in);    }    public void showPopUpMenu(View v) {        Context wrapper = new ContextThemeWrapper(this, R.style.popupMenuStyle);        IconizedMenu popup = new IconizedMenu(wrapper, v);        MenuInflater inflater = popup.getMenuInflater();        inflater.inflate(R.menu.menu_cacheclear, popup.getMenu());        setDynamicLanguagevale(this, popup, R.id.itemcacheclr, "CacheClear", R.string.CacheClear);//        setDynamicLanguagevale(this, popup, R.id.itemversion, "Version", R.string.Version);        popup.setOnMenuItemClickListener(new IconizedMenu.OnMenuItemClickListener() {            @Override            public boolean onMenuItemClick(MenuItem item) {                switch (item.getItemId()) {                    case R.id.itemcacheclr:                        setCahceClear();                        return true;                    case R.id.itemversion:                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.VersionLang), Toast.LENGTH_LONG).show();                        return true;                    default:                        return false;                }            }        });        popup.show();//showing popup menu    }//    @Override//    public boolean onCreateOptionsMenu(Menu menus) {//        // Inflate the menu; this adds items to the action bar if it is present.//        getMenuInflater().inflate(R.menu.menu_cacheclear, menus);//        this.menu = menus;//        return true;//    }////    @Override//    public boolean onOptionsItemSelected(MenuItem item) {//        // Handle action bar item clicks here. The action bar will//        // automatically handle clicks on the Home/Up button, so long//        // as you specify a parent activity in AndroidManifest.xml.//        int id = item.getItemId();//        if (id == R.id.itemcacheclr) {//            // Delete local cache dir (ignoring any errors):////            boolean val = AppController.getInstance().clearApplicationData();////            if (val) {//            setCahceClear();////            }//        }//        return super.onOptionsItemSelected(item);//    }    public void setCahceClear() {        final Dialog dialog = new Dialog(this);        // hide to default title for Dialog        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        // inflate the layout dialog_layout.xml and set it as contentView        LayoutInflater inflater = (LayoutInflater) this                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.dialog_confirmation, null, false);        dialog.setCanceledOnTouchOutside(true);        dialog.setContentView(view);        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(0));        Button btnCancel = (Button) dialog.findViewById(R.id.btnCancel);        Button btnUpdate = (Button) dialog.findViewById(R.id.btnUpdate);        TextView txt_title = (TextView) dialog.findViewById(R.id.txt_title);        TextView txtsms = (TextView) dialog.findViewById(R.id.txtsms);        btnCancel.setText(getDynamicLanguageValue(getApplicationContext(), "No", R.string.No));        btnUpdate.setText(getDynamicLanguageValue(getApplicationContext(), "Yes", R.string.Yes));        txt_title.setText(getDynamicLanguageValue(getApplicationContext(), "CacheClear", R.string.CacheClear));        txtsms.setText(getDynamicLanguageValue(getApplicationContext(), "doyouwantcacheclear", R.string.doyouwantcacheclear));        btnUpdate.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    boolean val = AppController.getInstance().clearApplicationData();                    if (val) {                        Utility.setLogout(NewHomeScreen.this, prefs);                        getDynamicLanguageToast(NewHomeScreen.this, "Thelocaldataclear", R.string.Thelocaldataclear);                        Intent in = new Intent(NewHomeScreen.this, NewHomeScreen.class);                        startActivity(in);                        finish();                    }                } catch (Exception ex) {                    ex.printStackTrace();                }                dialog.dismiss();            }        });        btnCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        // Display the dialog        dialog.show();    }    public void backup() {        try {            File sdcard = Environment.getExternalStorageDirectory();            File outputFile = new File(sdcard, "MFI");            if (!outputFile.exists())                outputFile.createNewFile();            File data = Environment.getDataDirectory();            File inputFile = new File(data, "data/" + this.getPackageName()                    + "/databases/" + "MyDB2");            InputStream input = new FileInputStream(inputFile);            OutputStream output = new FileOutputStream(outputFile);            byte[] buffer = new byte[1024];            int length;            while ((length = input.read(buffer)) > 0) {                output.write(buffer, 0, length);            }            output.flush();            output.close();            input.close();        } catch (IOException e) {            e.printStackTrace();            throw new Error("Copying Failed");        }    }    private class GetVersionCode extends AsyncTask<Void, String, String> {        //        ProgressDialog dialog = new ProgressDialog(NewHomeScreen.this);        TransparentProgressDialog dialog = new TransparentProgressDialog(                context, getDynamicLanguageValue(getApplicationContext(), "GooglePlayStoreUpdate", R.string.GooglePlayStoreUpdate));        //        dialog.show();        protected void onPreExecute() {            super.onPreExecute();            // TODO Auto-generated method stub        }        @Override        protected String doInBackground(Void... voids) {            String onlineVersion = null;            try {                newVersion = getApplicationContext().getPackageManager()                        .getPackageInfo(NewHomeScreen.this.getPackageName(), 0).versionName;                onlineVersion = Jsoup.connect("https://play.google.com/store/apps/details?id=" + NewHomeScreen.this.getPackageName() + "&hl=it")                        .timeout(5000)                        .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")                        .referrer("http://www.google.com")                        .get()                        .select(".hAyfc .htlgb")                        .get(7)                        .ownText();                return onlineVersion;            } catch (Exception e) {                return onlineVersion;            }        }        @Override        protected void onPostExecute(String onlineVersion) {            super.onPostExecute(onlineVersion);            dialog.dismiss();            try {                if (onlineVersion != null && !onlineVersion.isEmpty() && newVersion != null && !newVersion.isEmpty()) {                    String OnlineVer = onlineVersion.replace(".", ""), DeviceVer = newVersion.replace(".", "");                    if (!returnStringValue(onlineVersion).equalsIgnoreCase(returnStringValue(newVersion)) &&                            Integer.valueOf(OnlineVer) > Integer.valueOf(DeviceVer)) {                        OldFiledelete(db, 2);                        APKVersionUpdatePopUp();                    }                }                Log.d("update", "Current version " + newVersion + "playstore version " + onlineVersion);            } catch (Exception e) {                e.printStackTrace();            }        }    }    public static String returnStringValue(String myString) {        String iValue = "";        if (myString != null && myString != "" && !myString.equalsIgnoreCase("null") && myString.length() > 0) {            iValue = myString;        }        return iValue;    }    String tokenID = null, Messgae = "", notftytype = "normal", StepID = "", FarmID = "", Title = "", NotifImageURL = "", MessageTypeFinal = "";    public void CheckNotification(Bundle bundle) {//        bundle = getIntent().getExtras();        if (bundle != null) {            //bundle must contain all info sent in "data" field of the notification            try {                if (bundle.size() > 0) {                    //handle the data message here                    Messgae = bundle.getString("Messgae");                    notftytype = bundle.getString("notftytype");                    StepID = bundle.getString("StepID");                    FarmID = bundle.getString("FarmID");                    Title = bundle.getString("Title");                    tokenID = bundle.getString("tokenID");                    NotifImageURL = bundle.getString("NotifImageURL");                    MessageTypeFinal = bundle.getString("MessageTypeFinal");//                    if (tokenID != null && tokenID.equalsIgnoreCase(AppConstant.RegisterDeviceTokenKey)) {                    if (Messgae != null && Messgae.length() > 2) {                        if (AppConstant.isLogin = true && AppConstant.user_id != null) {                            NotificationCountSMS.setNotificationValueData(this, Messgae, notftytype, StepID, FarmID, Title, tokenID, NotifImageURL);                            Intent intent = new Intent(NewHomeScreen.this, MainProfileActivity.class);                            intent.putExtra("Messgae", Messgae);                            intent.putExtra("notftytype", notftytype);                            intent.putExtra("StepID", StepID);                            intent.putExtra("FarmID", FarmID);                            intent.putExtra("Title", Title);                            intent.putExtra("tokenID", tokenID);                            intent.putExtra("NotifImageURL", NotifImageURL);                            intent.putExtra("MessageTypeFinal",MessageTypeFinal);                            startActivity(intent);                            finish();                        }                    } else {                        String Parameters;                        try {                            Parameters = String.valueOf(bundle.getString("Parameters"));                            JSONArray ary = new JSONArray(Parameters);                            JSONObject obj = ary.getJSONObject(0);                            Messgae = obj.getString("Messgae");                            Messgae = Messgae.replace("\\", "");                            Messgae = Messgae.replace("\\\"", "");                            Messgae = Messgae.replace("\\\"", "");                            Title = obj.getString("Title");                            Title = Title.replace("\\", "");                            Title = Title.replace("\\\"", "");                            Title = Title.replace("\\\"", "");                            notftytype = obj.getString("notftytype");                            NotifImageURL = obj.getString("NotifImageURL");                            StepID = obj.getString("StepID");                            FarmID = obj.getString("FarmID");                            tokenID = obj.getString("tokenID");                            MessageTypeFinal = obj.getString("MessageTypeFinal");                        } catch (Exception ex) {                            ex.printStackTrace();                        }                        if (Messgae != null && Messgae.length() > 2 && AppConstant.isLogin == true && AppConstant.user_id != null) {                            NotificationCountSMS.setNotificationValueData(this, Messgae, notftytype, StepID, FarmID, Title, tokenID, NotifImageURL);                            Intent intent = new Intent(NewHomeScreen.this, MainProfileActivity.class);                            intent.putExtra("Messgae", Messgae);                            intent.putExtra("notftytype", notftytype);                            intent.putExtra("StepID", StepID);                            intent.putExtra("FarmID", FarmID);                            intent.putExtra("Title", Title);                            intent.putExtra("tokenID", tokenID);                            intent.putExtra("NotifImageURL", NotifImageURL);                            intent.putExtra("MessageTypeFinal",MessageTypeFinal);                            startActivity(intent);                            finish();                        }                    }                }            } catch (Exception ee) {                ee.printStackTrace();            }        }else{            Intent in = new Intent(getApplicationContext(), LoginWithOtp_New.class);            startActivity(in);            finish();        }    }    @Override    protected void onResume() {        super.onResume();        if (db != null) {            db = new DBAdapter(this);        }        Log.d("onResume Method", "onResume Method called");//        setRadioButtonBG(selectedlanguages);//        setButtonlistener(selectedlanguages);    }    @Override    protected void onPause() {        super.onPause();        if (db != null) {            db = new DBAdapter(this);        }        Log.d("OnPause Method", "OnPause Method called");        setScreenTracking(this, db, SN_NewHomeScreen, UID);    }    @Override    protected void onStop() {        super.onStop();        if (db != null) {            db = new DBAdapter(this);        }        Log.d("onStop Method", "onStop Method called");        setScreenTracking(this, db, SN_NewHomeScreen, UID);    }    @Override    public void onBackPressed() {        // code here to show dialog        super.onBackPressed();  // optional depending on your needs        Log.d("onBackPressed Method", "onBackPressed Method called");        this.moveTaskToBack(true);    }    private void setIdDefine() {//        toolbar = (Toolbar) findViewById(R.id.toolbar);//        txt_myfarm = (TextView) findViewById(R.id.txt_myfarm);//        txt_india = (TextView) findViewById(R.id.txt_india);//        txt_version = (TextView) findViewById(R.id.txt_version);        menutool = (ImageView) findViewById(R.id.menutool);        txt_Locatethefarm = (TextView) findViewById(R.id.txt_Locatethefarm);        txtVersion = (TextView) findViewById(R.id.txtVersion);        rb_English = (CheckBox) findViewById(R.id.rb_English);        rb_Hindi = (CheckBox) findViewById(R.id.rb_Hindi);        rb_Marathi = (CheckBox) findViewById(R.id.rb_Marathi);        rb_Gujarati = (CheckBox) findViewById(R.id.rb_Gujarati);        rb_Bengali = (CheckBox) findViewById(R.id.rb_Bengali);        rb_Tamil = (CheckBox) findViewById(R.id.rb_Tamil);        imgview_next = (ImageView) findViewById(R.id.imgview_next);        setFonts();    }    public void setFonts() {        UtilFonts.UtilFontsInitialize(this);//        txt_myfarm.setTypeface(UtilFonts.FS_UltraItalic);//        txt_india.setTypeface(UtilFonts.FS_UltraItalic);//        txt_version.setTypeface(UtilFonts.FS_UltraItalic);        rb_English.setTypeface(UtilFonts.KT_Bold);        rb_Hindi.setTypeface(UtilFonts.KT_Bold);        rb_Marathi.setTypeface(UtilFonts.KT_Bold);        rb_Gujarati.setTypeface(UtilFonts.KT_Bold);        rb_Bengali.setTypeface(UtilFonts.KT_Bold);        rb_Tamil.setTypeface(UtilFonts.KT_Bold);        txt_Locatethefarm.setTypeface(UtilFonts.KT_Bold);    }    private void setRadioButtonClick(CheckBox rb, final String flags) {        rb.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked == true) {                    setRadioButtonBG(flags);                }                selectedlanguages = flags;                setButtonlistener(selectedlanguages);            }        });    }    private void setRadioButtonBG(String flags) {        switch (flags) {            case "hindi":                rb_English.setButtonDrawable(R.drawable.icon_wrong);                rb_Hindi.setButtonDrawable(R.drawable.icon_right);                rb_Marathi.setButtonDrawable(R.drawable.icon_wrong);                rb_Gujarati.setButtonDrawable(R.drawable.icon_wrong);                rb_Bengali.setButtonDrawable(R.drawable.icon_wrong);                rb_Tamil.setButtonDrawable(R.drawable.icon_wrong);                break;            case "english":                rb_English.setButtonDrawable(R.drawable.icon_right);                rb_Hindi.setButtonDrawable(R.drawable.icon_wrong);                rb_Marathi.setButtonDrawable(R.drawable.icon_wrong);                rb_Gujarati.setButtonDrawable(R.drawable.icon_wrong);                rb_Bengali.setButtonDrawable(R.drawable.icon_wrong);                rb_Tamil.setButtonDrawable(R.drawable.icon_wrong);                break;            case "gujarati":                rb_English.setButtonDrawable(R.drawable.icon_wrong);                rb_Hindi.setButtonDrawable(R.drawable.icon_wrong);                rb_Marathi.setButtonDrawable(R.drawable.icon_wrong);                rb_Gujarati.setButtonDrawable(R.drawable.icon_right);                rb_Bengali.setButtonDrawable(R.drawable.icon_wrong);                rb_Tamil.setButtonDrawable(R.drawable.icon_wrong);                break;            case "marathi":                rb_English.setButtonDrawable(R.drawable.icon_wrong);                rb_Hindi.setButtonDrawable(R.drawable.icon_wrong);                rb_Marathi.setButtonDrawable(R.drawable.icon_right);                rb_Gujarati.setButtonDrawable(R.drawable.icon_wrong);                rb_Bengali.setButtonDrawable(R.drawable.icon_wrong);                rb_Tamil.setButtonDrawable(R.drawable.icon_wrong);                break;            case "bengali":                rb_English.setButtonDrawable(R.drawable.icon_wrong);                rb_Hindi.setButtonDrawable(R.drawable.icon_wrong);                rb_Marathi.setButtonDrawable(R.drawable.icon_wrong);                rb_Gujarati.setButtonDrawable(R.drawable.icon_wrong);                rb_Bengali.setButtonDrawable(R.drawable.icon_right);                rb_Tamil.setButtonDrawable(R.drawable.icon_wrong);                break;            case "tamil":                rb_English.setButtonDrawable(R.drawable.icon_wrong);                rb_Hindi.setButtonDrawable(R.drawable.icon_wrong);                rb_Marathi.setButtonDrawable(R.drawable.icon_wrong);                rb_Gujarati.setButtonDrawable(R.drawable.icon_wrong);                rb_Bengali.setButtonDrawable(R.drawable.icon_wrong);                rb_Tamil.setButtonDrawable(R.drawable.icon_right);                break;        }    }    private void setButtonlistener(final String flags) {        switch (flags) {            case "hindi":                setLanguages(1);                break;            case "english":                setLanguages(2);                break;            case "gujarati":                setLanguages(3);                break;            case "marathi":                setLanguages(4);                break;            case "bengali":                setLanguages(5);                break;            case "tamil":                setLanguages(6);                break;        }    }    @SuppressLint("StaticFieldLeak")    private class getFarmListAsyncTask extends AsyncTask<Void, Void, String> {        SignInData data;        String result = "";        TransparentProgressDialog progressDialog;        public getFarmListAsyncTask() {            this.data = data;        }        @Override        protected void onPreExecute() {            super.onPreExecute();            progressDialog = new TransparentProgressDialog(                    NewHomeScreen.this, getDynamicLanguageValue(getApplicationContext(), "getfarmdetails", R.string.getfarmdetails));            progressDialog.setCancelable(false);            progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {                                                @Override                                                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {                                                    return false;                                                }                                            }            );            progressDialog.show();        }        @Override        protected String doInBackground(Void... params) {            String sendRequest = null;            try {                sendRequest = AppManager.getInstance().getFarmList + AppConstant.user_id;                Log.d("get farm url", sendRequest);                String response = AppManager.getInstance().httpRequestGetMethod(sendRequest);                System.out.println("farm_details :" + response);                return response;            } catch (Exception ex) {                ex.printStackTrace();            }            return null; //show network problem        }        @Override        protected void onPostExecute(String response) {            super.onPreExecute();            try {                if (response != null) {                    if (response.contains("No Farms")) {                        System.out.println("Farm not available");                        getDynamicLanguageToast(NewHomeScreen.this, "Farmnotavailable", R.string.Farmnotavailable);//                        Intent in = new Intent(getApplicationContext(), LoginWithOtp_New.class);//                        startActivity(in);                    } else {                        AllFarmDetail addFarmDetail;                        db.open();                        //  db.deleteAllFarmDetailTable();                        System.out.println("farm detail response " + response);                        JSONArray jArray = new JSONArray(AppManager.getInstance().placeSpaceIntoString(response));                        System.out.println("farm detail response " + jArray.length());                        if (jArray.length() > 0) {                            int deleteCount = db.db.delete(DBAdapter.DATABASE_TABLE_ALL_FARM_DETAIL, DBAdapter.SENDING_STATUS + " = '" + DBAdapter.SENT + "'", null);                            int deleteCount1 = db.db.delete(DBAdapter.TABLE_QUERY_CROP, DBAdapter.SENDING_STATUS + " = '" + DBAdapter.SENT + "'", null);                            System.out.println("deleteCount : " + deleteCount + " deleteCount1 : " + deleteCount1);                        }                        for (int i = 0; i < jArray.length(); i++) {                            JSONObject jsonObject = jArray.getJSONObject(i);                            addFarmDetail = new AllFarmDetail(jsonObject);                            addFarmDetail.setUserId(AppConstant.user_id);                            String farmId = addFarmDetail.getFarmId();                            String farmName = addFarmDetail.getFarmName();                            String farmerName = addFarmDetail.getFarmerName();                            String farmerNumber = addFarmDetail.getFarmerPhone();                            String concern = addFarmDetail.getConcern();                            Long l = db.insertAllFarmDetail(addFarmDetail, DBAdapter.SENT);                            if (jsonObject.has("CropInfo")) {                                JSONArray corpInfoArray = jsonObject.getJSONArray("CropInfo");                                for (int j = 0; j < corpInfoArray.length(); j++) {                                    JSONObject cropJsonObject = corpInfoArray.getJSONObject(j);                                    CropQueryData data = new CropQueryData();                                    data.setFarmId(farmId);                                    data.setFarmName(farmName);                                    data.setYourCencern(concern);                                    data.setCropID(cropJsonObject.isNull("CropID") ? "" : cropJsonObject.getString("CropID"));                                    data.setCrop(cropJsonObject.isNull("CropName") ? "" : cropJsonObject.getString("CropName"));                                    String variety = cropJsonObject.isNull("Variety") ? "" : cropJsonObject.getString("Variety");                                    data.setVariety(variety.replaceAll("%20", " "));                                    data.setBasalDoseN(cropJsonObject.isNull("N") ? "0" : cropJsonObject.getString("N"));                                    data.setBasalDoseP(cropJsonObject.isNull("P") ? "0" : cropJsonObject.getString("P"));                                    data.setBasalDoseK(cropJsonObject.isNull("K") ? "0" : cropJsonObject.getString("K"));                                    data.setSowPeriodForm(cropJsonObject.isNull("SowDate") ? "" : cropJsonObject.getString("SowDate"));                                    data.setOtherNutrition(cropJsonObject.isNull("OtherNutrient") ? "" : cropJsonObject.getString("OtherNutrient"));                                    data.setBesalDoseApply(cropJsonObject.isNull("BasalDoseApply") ? "" : cropJsonObject.getString("BasalDoseApply"));                                    long inserted = data.insert(db, DBAdapter.SENT);                                    System.out.println("database return value=" + l);//                                    Intent in = new Intent(getApplicationContext(), LoginWithOtp_New.class);//                                    startActivity(in);                                }                            }                        }                        db.close();                    }                } else {                    getDynamicLanguageToast(NewHomeScreen.this, "ServerError", R.string.ServerError);                }            } catch (JSONException e) {                e.printStackTrace();                System.out.println("catch block Pls Try again");            }            progressDialog.dismiss();        }    }    //    private ColorRes res;//    @Override//    public Resources getResources() {//        if (res == null) {//            res = new ColorRes(super.getResources());//        }//        return res;//    }    public void downloadLocalTranslation() {        try {            final TransparentProgressDialog dialoug = new TransparentProgressDialog(NewHomeScreen.this,                    getDynamicLanguageValue(getApplicationContext(), "TranslationDataisdownloading", R.string.TranslationDataisdownloading));            dialoug.show();            String URL = AppManager.getInstance().LocalTranslationURL;            StringRequest stringRequest = new StringRequest(Request.Method.GET, URL,                    new Response.Listener<String>() {                        @Override                        public void onResponse(String response) {                            // Display the first 500 characters of the response string.                            try {                                if (response != null && response.length() > 0) {//									GsonBuilder builder = new GsonBuilder();//									Gson gson = builder.create();//									String str = gson.fromJson(response, String.class);                                    JSONArray array = new JSONArray(response);                                    if (array.length() > 0) {                                        db.open();                                        db.insertLocalTranslation(array);                                    }                                }                            } catch (Exception ex) {                                ex.printStackTrace();                                getDynamicLanguageToast(NewHomeScreen.this, "ServerError", R.string.ServerError);                            }                            dialoug.dismiss();                        }                    }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    dialoug.cancel();                    System.out.println("Volley Error : " + error);                }            });            int socketTimeout = 60000;//60 seconds - change to what you want            RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, 0, 0);            stringRequest.setRetryPolicy(policy);            // Adding request to volley request queue            AppController.getInstance().addToRequestQueue(stringRequest);        } catch (Exception ex) {            ex.printStackTrace();        }    }    public void getSelectedLanguages(String SQL) {        try {            db.open();            SelectedLanguageValue = new HashMap<>();            SelectedLanguageValue = db.getDynamicTableKeyValue(SQL);            String valu = "";        } catch (Exception ex) {            ex.printStackTrace();        }    }    public void checkDailyLogin() {        if (AppConstant.user_id != null && AppConstant.user_id.length() > 0) {            String CheckDailyLogin = prefs.getString(AppConstant.PREFRENCE_KEY_DailyLoginCheck, null);            String CurrentDate = getdate();            if (CheckDailyLogin == null || CheckDailyLogin.length() < 0 || !CheckDailyLogin.equalsIgnoreCase(CurrentDate)) {                SharedPreferences prefs1 = getSharedPreferences(AppConstant.SHARED_PREFRENCE_NAME, MODE_PRIVATE);                SharedPreferences.Editor editor = prefs1.edit();                editor.putString(AppConstant.PREFRENCE_KEY_DailyLoginCheck, CurrentDate);                editor.apply();               new getFarmDetailAsyncTask().execute();            }        }    }    //////////////////////////////////////////////////////////////////////////    @SuppressLint("StaticFieldLeak")    private class getFarmDetailAsyncTask extends AsyncTask<Void, Void, String> {        SignInData data;        String result = "";        TransparentProgressDialog progressDialog;        public getFarmDetailAsyncTask() {            this.data = data;        }        @Override        protected void onPreExecute() {            super.onPreExecute();            progressDialog = new TransparentProgressDialog(                    context, context.getResources().getString(                    R.string.getfarmdetails));            progressDialog.setCancelable(false);            progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {                                                @Override                                                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {                                                    return false;                                                }                                            }            );            progressDialog.show();        }        @Override        protected String doInBackground(Void... params) {            String sendRequest = null;            try {                sendRequest = AppManager.getInstance().getFarmList + AppConstant.user_id;                Log.d("get farm url", sendRequest);                String response = AppManager.getInstance().httpRequestGetMethod(sendRequest);                System.out.println("farm_details :" + response);                return response;            } catch (Exception ex) {                ex.printStackTrace();            }            return null; //show network problem        }        @Override        protected void onPostExecute(String response) {            super.onPreExecute();            //Get COunt Farmer            try {                if (AppConstant.user_id != null && AppConstant.user_id.length() > 0) {                    String sql = "select count(*) from allFarmDetail where userId= '" + AppConstant.user_id + "'";                    int FarmerCount = db.getMaxRecord(sql);                    if (FarmerCount == 0) {                        new getFarmListAsyncTask().execute();                    }                }            } catch (Exception ex) {                ex.printStackTrace();            }            try {                if (response != null) {                    if (response.contains("No Farms")) {                        System.out.println("Farm not available");                        Toast.makeText(getBaseContext(), getResources().getString(R.string.Farmnotavailable), Toast.LENGTH_LONG).show();//                        gotoHomeScreen();                    } else {                        AllFarmDetail addFarmDetail;                        db.open();                        //  db.deleteAllFarmDetailTable();                        System.out.println("farm detail response " + response);                        JSONArray jArray = new JSONArray(AppManager.getInstance().placeSpaceIntoString(response));                        System.out.println("farm detail response " + jArray.length());                        if (jArray.length() > 0) {                            int deleteCount = db.db.delete(DBAdapter.DATABASE_TABLE_ALL_FARM_DETAIL, DBAdapter.SENDING_STATUS + " = '" + DBAdapter.SENT + "'", null);                            int deleteCount1 = db.db.delete(DBAdapter.TABLE_QUERY_CROP, DBAdapter.SENDING_STATUS + " = '" + DBAdapter.SENT + "'", null);                            System.out.println("deleteCount : " + deleteCount + " deleteCount1 : " + deleteCount1);                        }                        for (int i = 0; i < jArray.length(); i++) {                            JSONObject jsonObject = jArray.getJSONObject(i);                            addFarmDetail = new AllFarmDetail(jsonObject);                            addFarmDetail.setUserId(AppConstant.user_id);                            String farmId = addFarmDetail.getFarmId();                            String farmName = addFarmDetail.getFarmName();                            String farmerName = addFarmDetail.getFarmerName();                            String farmerNumber = addFarmDetail.getFarmerPhone();                            String concern = addFarmDetail.getConcern();                            Long l = db.insertAllFarmDetail(addFarmDetail, DBAdapter.SENT);                            if (jsonObject.has("CropInfo")) {                                JSONArray corpInfoArray = jsonObject.getJSONArray("CropInfo");                                for (int j = 0; j < corpInfoArray.length(); j++) {                                    JSONObject cropJsonObject = corpInfoArray.getJSONObject(j);                                    CropQueryData data = new CropQueryData();                                    data.setFarmId(farmId);                                    data.setFarmName(farmName);                                    data.setYourCencern(concern);                                    data.setCropID(cropJsonObject.isNull("CropID") ? "" : cropJsonObject.getString("CropID"));                                    data.setCrop(cropJsonObject.isNull("CropName") ? "" : cropJsonObject.getString("CropName"));                                    String variety = cropJsonObject.isNull("Variety") ? "" : cropJsonObject.getString("Variety");                                    data.setVariety(variety.replaceAll("%20", " "));                                    data.setBasalDoseN(cropJsonObject.isNull("N") ? "0" : cropJsonObject.getString("N"));                                    data.setBasalDoseP(cropJsonObject.isNull("P") ? "0" : cropJsonObject.getString("P"));                                    data.setBasalDoseK(cropJsonObject.isNull("K") ? "0" : cropJsonObject.getString("K"));                                    data.setSowPeriodForm(cropJsonObject.isNull("SowDate") ? "" : cropJsonObject.getString("SowDate"));                                    data.setOtherNutrition(cropJsonObject.isNull("OtherNutrient") ? "" : cropJsonObject.getString("OtherNutrient"));                                    data.setBesalDoseApply(cropJsonObject.isNull("BasalDoseApply") ? "" : cropJsonObject.getString("BasalDoseApply"));                                    long inserted = data.insert(db, DBAdapter.SENT);                                    System.out.println("database return value=" + l);                                }                            }                        }                        db.close();                    }                } else {                    Toast.makeText(getBaseContext(), getResources().getString(R.string.ServerError), Toast.LENGTH_LONG).show();                }            } catch (JSONException e) {                e.printStackTrace();                System.out.println("catch block Pls Try again");            } catch (Exception e) {                e.printStackTrace();                System.out.println("catch block Pls Try again");            }            progressDialog.dismiss();        }    }}