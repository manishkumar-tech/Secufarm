package com.weather.risk.mfi.myfarminfo.adapter;import android.app.Dialog;import android.content.Context;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import androidx.recyclerview.widget.RecyclerView;import com.squareup.picasso.Picasso;import com.weather.risk.mfi.myfarminfo.R;import com.weather.risk.mfi.myfarminfo.bean.WeedMngt;import java.util.ArrayList;public class PostHarvMngtImagelistAdapter extends RecyclerView.Adapter<PostHarvMngtImagelistAdapter.ViewHolder> {    public Context mContext;    String imageString;    int totalAmount = 0;    private ArrayList<String> mDataset = new ArrayList<String>();    // Provide a suitable constructor (depends on the kind of dataset)    public PostHarvMngtImagelistAdapter(Context con, ArrayList<String> myDataset) {        mDataset = myDataset;        mContext = con;    }    public void remove(int pos) {        //   int position = mDataset.indexOf(item);        mDataset.remove(pos);        notifyItemRemoved(pos);    }    // Create new views (invoked by the layout manager)    @Override    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        // create a new view        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.postharvmngtimageadapter, parent, false);        ViewHolder vh = new ViewHolder(v);        return vh;    }    // Replace the contents of a view (invoked by the layout manager)    @Override    public void onBindViewHolder(final ViewHolder holder, final int position) {        String ImageURL = mDataset.get(position);        try {            if (ImageURL != null && ImageURL.length() > 6) {                holder.imageview.setVisibility(View.GONE);//                        Picasso.with(NotificationPOPDetailsDialog.this).load(NotifImageURL).into(image);                Picasso.with(mContext).load(ImageURL)                        .into(holder.imageview, new com.squareup.picasso.Callback() {                            @Override                            public void onSuccess() {                                holder.imageview.setVisibility(View.VISIBLE);                            }                            @Override                            public void onError() {//                                holder.imageview.setVisibility(View.GONE);                            }                        });            }        } catch (Exception ex) {            ex.printStackTrace();        }        holder.imageview.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String ImageURL = mDataset.get(position);                setPopUpImage(ImageURL);            }        });    }    public void setPopUpImage(String ImageURL) {        final Dialog dialog = new Dialog(mContext);        dialog.setCanceledOnTouchOutside(true);        Window window = dialog.getWindow();        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        WindowManager.LayoutParams wlp = window.getAttributes();        wlp.gravity = Gravity.BOTTOM;        wlp.dimAmount = 0.5f;        dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);        // wlp.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;        window.setAttributes(wlp);        // Include dialog.xml file        dialog.setContentView(R.layout.screen_popup);        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);        dialog.show();        final ImageView cancel = (ImageView) dialog.findViewById(R.id.cancel_popup);        final ImageView image_popup = (ImageView) dialog.findViewById(R.id.image_popup);//        image_popup.setImageDrawable(mContext.getResources().getDrawable(mDataset.get(pos).getImageName()));        try {            if (ImageURL != null && ImageURL.length() > 6) {                image_popup.setVisibility(View.GONE);//                        Picasso.with(NotificationPOPDetailsDialog.this).load(NotifImageURL).into(image);                Picasso.with(mContext).load(ImageURL)                        .into(image_popup, new com.squareup.picasso.Callback() {                            @Override                            public void onSuccess() {                                image_popup.setVisibility(View.VISIBLE);                            }                            @Override                            public void onError() {//                                image_popup.setVisibility(View.GONE);                            }                        });            }        } catch (Exception ex) {            ex.printStackTrace();        }        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.cancel();            }        });    }    // Return the size of your dataset (invoked by the layout manager)    @Override    public int getItemCount() {        return mDataset.size();    }    // Provide a reference to the views for each data item    // Complex data items may need more than one view per item, and    // you provide access to all the views for a data item in a view holder    public class ViewHolder extends RecyclerView.ViewHolder {        // each data item is just a string in this case        public ImageView imageview;        public ViewHolder(View v) {            super(v);            imageview = (ImageView) v.findViewById(R.id.imageview);        }    }}