package com.weather.risk.mfi.myfarminfo.logging;import android.content.Context;import android.os.AsyncTask;import android.os.Environment;import android.util.Base64;import android.widget.Toast;import com.weather.risk.mfi.myfarminfo.R;import com.weather.risk.mfi.myfarminfo.database.DBAdapter;import com.weather.risk.mfi.myfarminfo.mapfragments.LatLonCellID;import com.weather.risk.mfi.myfarminfo.utils.AppConstant;import com.weather.risk.mfi.myfarminfo.utils.AppManager;import com.weather.risk.mfi.myfarminfo.utils.TransparentProgressDialog;import org.json.JSONArray;import org.json.JSONObject;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileWriter;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import static com.weather.risk.mfi.myfarminfo.customcamera.CameraSurfaceView.IMAGE_DIRECTORY;import static com.weather.risk.mfi.myfarminfo.database.DBAdapter.TABLE_tblEventLogError;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getAppVersion;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getdateYYYYMMDD;import static com.weather.risk.mfi.myfarminfo.utils.Utility.gettime;public class LocalFileWriter {    public static void SaveLocalFile(DBAdapter db, Context context, String ScreenActivity, String URL, String JSON,                                     String Error, String APITakingTime, String FarmID, String Status) {        FileOutputStream fos = null;        try {            if (AppConstant.user_id != null && AppConstant.user_id.length() > 0) { //User should not be blanked                String datetime = getdateYYYYMMDD() + " " + gettime();                String sql_count = "select count(*) from " + TABLE_tblEventLogError + " where UserID='" + AppConstant.user_id + "' and DateTime='" + datetime + "'";                db.open();                int count = db.getMaxRecord(sql_count);                if (count == 0) {//UserID and DateTIme Duplicacy Check                    String sFileName = "SecuFarmSurveyor_ErrorFile";                    String CurrentLocation = LatLonCellID.currentLat + " / " + LatLonCellID.currentLon;                    String SQL = "insert into " + TABLE_tblEventLogError + " (Apps,ScreenActivity,UserID,Location,DateTime,URL,APITakingTime,Error,FarmID,Status) values('SecuFarm Surveyor','"                            + ScreenActivity + "','" + AppConstant.user_id + "','" + CurrentLocation + "','" + datetime + "','" + URL + "','" +//                    APITakingTime + "','" + JSON + "','" + Error + "','" + FarmID + "','" + Status + "')";                            APITakingTime + "','" + Error + "','" + FarmID + "','" + Status + "')";                    db.open();                    db.getSQLiteDatabase().execSQL(SQL);                    String textVBody = "";                    textVBody = "Apps : " + "SecuFarm Surveyor" +                            "\nScreenActivity : " + ScreenActivity +                            "\nUserID : " + AppConstant.user_id +                            "\nLocation : " + CurrentLocation +                            "\nDateTime : " + datetime +                            "\nURL : " + URL +                            "\nAPITakingTime : " + APITakingTime +                            "\nJson : " + JSON +                            "\nError : " + Error +                            "\nFarmID : " + FarmID +                            "\nStatus : " + Status +                            "\nAppVersion : " + getAppVersion(context);//            String mFilePath = Environment.getExternalStorageDirectory() + IMAGE_DIRECTORY + "/" + mFileName + ".pdf";                    File root = new File(Environment.getExternalStorageDirectory(), IMAGE_DIRECTORY);                    if (!root.exists()) {                        root.mkdirs();                    }                    File gpxfile = new File(root, sFileName);                    FileWriter writer = new FileWriter(gpxfile, true);                    writer.append(textVBody + "\n\n");                    writer.flush();                    writer.close();                }            }        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }    }    public static void getUploadLocalFile(DBAdapter db, Context context) {        FileOutputStream fos = null;        try {            JSONObject obj = new JSONObject();            JSONArray array = new JSONArray();            db.open();            try {                db.open();                ArrayList<HashMap<String, String>> hasmap = new ArrayList<>();                String sql = "Select * from " + TABLE_tblEventLogError;                hasmap = db.getDynamicTableValue(sql);                if (hasmap != null && hasmap.size() > 0) {                    for (int i = 0; i < hasmap.size(); i++) {                        JSONObject objs = new JSONObject();                        objs.put("Apps", hasmap.get(0).get("Apps"));                        objs.put("ScreenActivity", hasmap.get(0).get("ScreenActivity"));                        objs.put("UserID", hasmap.get(0).get("UserID"));                        objs.put("Location", hasmap.get(0).get("Location"));                        objs.put("DateTime", hasmap.get(0).get("DateTime"));                        objs.put("URL", hasmap.get(0).get("URL"));                        objs.put("APITakingTime", hasmap.get(0).get("APITakingTime"));                        objs.put("Json", hasmap.get(0).get("Json"));                        objs.put("Error", hasmap.get(0).get("Error"));                        objs.put("FarmID", hasmap.get(0).get("FarmID"));                        objs.put("Status", hasmap.get(0).get("Status"));                        objs.put("AppVerion", getAppVersion(context));                        array.put(objs);                    }                    obj.put("EventLogError", array);                }            } catch (Exception ex) {            }            String sFileName = "SecuFarmSurveyor_ErrorFile";            File root = new File(Environment.getExternalStorageDirectory(), IMAGE_DIRECTORY);            if (!root.exists()) {                root.mkdirs();            }            String FilePath = String.valueOf(root) + "/" + sFileName;            String Filevalue = getBase64FromPath(FilePath);            obj.put("File", Filevalue);            new getUploadEventLogrror(db, context, obj).execute();        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getBase64FromPath(String path) {        String base64 = "";        try {/*from   w w w .  ja  va  2s  .  c om*/            File file = new File(path);            byte[] buffer = new byte[(int) file.length() + 100];            @SuppressWarnings("resource")            int length = new FileInputStream(file).read(buffer);            base64 = Base64.encodeToString(buffer, 0, length,                    Base64.DEFAULT);        } catch (IOException e) {            e.printStackTrace();        } catch (OutOfMemoryError e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }        return base64;    }    public static class getUploadEventLogrror extends AsyncTask<Void, Void, String> {        TransparentProgressDialog progressDialog;        JSONObject jsonObjects;        DBAdapter db;        Context context;        public getUploadEventLogrror(DBAdapter dbs, Context contexts, JSONObject jsonObject) {            jsonObjects = jsonObject;            context = contexts;            db = dbs;        }        @Override        protected void onPreExecute() {            super.onPreExecute();            progressDialog = new TransparentProgressDialog(                    context, context.getResources().getString(R.string.EventLogErrordataProcessing));            progressDialog.setCancelable(false);            progressDialog.show();        }        @Override        protected String doInBackground(Void... params) {            String response = null;            try {                String sendPath = AppManager.getInstance().UploadEventLogError;                String PassJSON = jsonObjects.toString();                response = AppManager.getInstance().httpRequestPostMethodReport(sendPath, PassJSON);                System.out.println("AllResponse :---" + response);            } catch (Exception ex) {                ex.printStackTrace();            }            return response;        }        @Override        protected void onPostExecute(String response) {            super.onPreExecute();            try {                progressDialog.dismiss();                if (response != null && response.contains("Data Inserted Successfully")) {                    try {                        String SQL = "delete from " + TABLE_tblEventLogError;                        db.getSQLiteDatabase().execSQL(SQL);                        String sFileName = "SecuFarm_ErrorFile";                        File root = new File(Environment.getExternalStorageDirectory(), IMAGE_DIRECTORY);                        String FilePath = String.valueOf(root) + "/" + sFileName;                        File fdelete = new File(FilePath);                        if (fdelete.exists()) {                            if (fdelete.delete()) {                                System.out.println("file Deleted :" + sFileName);                            } else {                                System.out.println("file not Deleted :" + sFileName);                            }                        }                    } catch (Exception ex) {                        ex.printStackTrace();                    }                }            } catch (Exception e) {                e.printStackTrace();                Toast.makeText(context, context.getResources().getString(R.string.ResponseFormattingError), Toast.LENGTH_LONG).show();            }        }    }}