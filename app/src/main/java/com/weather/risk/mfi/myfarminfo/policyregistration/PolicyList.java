package com.weather.risk.mfi.myfarminfo.policyregistration;import android.app.AlertDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.graphics.Rect;import android.os.AsyncTask;import android.os.Bundle;import android.provider.Settings;import android.util.Log;import android.view.Gravity;import android.view.MotionEvent;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Spinner;import androidx.databinding.ViewDataBinding;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.LinearLayoutManager;import com.weather.risk.mfi.myfarminfo.R;import com.weather.risk.mfi.myfarminfo.activities.CustomSearchableSpinner;import com.weather.risk.mfi.myfarminfo.database.DBAdapter;import com.weather.risk.mfi.myfarminfo.databinding.PolicylistBinding;import com.weather.risk.mfi.myfarminfo.home.AppController;import com.weather.risk.mfi.myfarminfo.marketplace.BaseActivity;import com.weather.risk.mfi.myfarminfo.marketplace.DataInterface;import com.weather.risk.mfi.myfarminfo.retofitservices.ApiService;import com.weather.risk.mfi.myfarminfo.retofitservices.ResponseObserver;import com.weather.risk.mfi.myfarminfo.retrofitmodelnew.CategoryDetailResponse;import com.weather.risk.mfi.myfarminfo.retrofitmodelnew.FarmerDetailsResponse;import com.weather.risk.mfi.myfarminfo.retrofitmodelnew.FarmerListRequest;import com.weather.risk.mfi.myfarminfo.retrofitmodelnew.FarmerResponse;import com.weather.risk.mfi.myfarminfo.retrofitmodelnew.RequestCategoryBean;import com.weather.risk.mfi.myfarminfo.utils.AppConstant;import com.weather.risk.mfi.myfarminfo.utils.AppManager;import com.weather.risk.mfi.myfarminfo.utils.ConnectionDetector;import com.weather.risk.mfi.myfarminfo.utils.TransparentProgressDialog;import org.json.JSONArray;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.CompositeDisposable;import io.reactivex.schedulers.Schedulers;import retrofit2.Response;import static com.weather.risk.mfi.myfarminfo.utils.AppConstant.SelectFarmDetails_policy;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getDynamicLanguageToast;import static com.weather.risk.mfi.myfarminfo.utils.Utility.getDynamicLanguageValue;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setCustomSearchableSpinner;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setDynamicLanguage;import static com.weather.risk.mfi.myfarminfo.utils.Utility.setFontsStyleTxt;public class PolicyList extends BaseActivity implements DataInterface {    private ApiService apiService;    List<CategoryDetailResponse> dataList = new ArrayList<CategoryDetailResponse>();    ArrayList<HashMap<String, String>> Projects = new ArrayList<>();    String balanceAmnt = "0";    String farmerId = null, projectID = null;    String projectName = null;    String cropID = null, cropName = null;    ArrayList<String> str = new ArrayList<String>();    ArrayList<String> strFarmId = new ArrayList<String>();    ArrayList<HashMap<String, String>> FarmDetailsList = new ArrayList<HashMap<String, String>>();    DBAdapter db;    ConnectionDetector connectionDetector;    Spinner farmSpinner;    String farmID = null;    String state_id = null;    CustomSearchableSpinner cropSpinner;    Spinner farmerSpinner;    LinearLayout cropLay, farmLay, farmerLay;    ArrayList<HashMap<String, String>> Crops = new ArrayList<>();    String district_id = null;    ArrayList<HashMap<String, String>> States = new ArrayList<>();    ArrayList<HashMap<String, String>> Districts = new ArrayList<>();    ArrayList<HashMap<String, String>> SubDistricts = new ArrayList<>();    ArrayList<HashMap<String, String>> Villages = new ArrayList<>();    String StateID = "", StateName = "", DistrictID = "", DistrictName = "", SubDistrictID = "",            SubDistrictName = "", VillageID = null, VillageName = null;    Spinner spin_state;    Spinner spin_district;    Spinner spin_subdistrict;    Spinner spin_villageName;    Dialog dialog = null;    ArrayList<String> strFarmer = new ArrayList<String>();    ArrayList<Integer> strFarmerId = new ArrayList<Integer>();    ImageView filterFarmer;    int SelectedCategoryValue = 0;    PolicylistBinding binding;//        PolicylistnewBinding binding;    public static FarmerDetailsResponse SelectFarmerDetails_policy = new FarmerDetailsResponse();    @Override    protected void initView(Bundle bundle, ViewDataBinding viewDataBinding) {        binding = (PolicylistBinding) viewDataBinding;        db = new DBAdapter(this);        cropSpinner = binding.cropSpinner;        cropLay = binding.cropLay;        farmLay = binding.farmLay;        farmerLay = binding.farmerLay;        farmSpinner = binding.farmSpinner;        farmerSpinner = binding.farmerSpinner;        filterFarmer = binding.farmerRefresh;//        SelectFarmDetails_policy = new JSONObject();        SelectFarmerDetails_policy = new FarmerDetailsResponse();        binding.backbtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        state_id = getIntent().getStringExtra("state_id");        farmerId = getIntent().getStringExtra("farmerId");        district_id = getIntent().getStringExtra("district_id");        connectionDetector = new ConnectionDetector(this);        binding.serviceHistory.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (farmerId != null) {                    Intent in = new Intent(getApplicationContext(), ServiceHistory.class);                    in.putExtra("farmerId", farmerId);                    in.putExtra("farmID", farmID);                    startActivity(in);                } else {                    getDynamicLanguageToast(getApplicationContext(), "Pleaseselectyourfarmfarmer", R.string.Pleaseselectyourfarmfarmer);                }            }        });        apiService = AppController.getInstance().getApiService();//        farmSpinner.setTitle(getResources().getString(R.string.SelectFarm));//        farmSpinner.setPositiveButton(getResources().getString(R.string.Ok));//        if (state_id != null && !state_id.equalsIgnoreCase("null") && state_id.length() > 0) {//            if (farmerId != null && !farmerId.equalsIgnoreCase("null") && farmerId.length() > 0) {//                farmLay.setVisibility(View.GONE);//                farmerLay.setVisibility(View.GONE);//                allbindCrop();//            } else {//                farmLay.setVisibility(View.VISIBLE);//                farmerLay.setVisibility(View.VISIBLE);//                getAllFarmName();//            }//        } else {//            farmLay.setVisibility(View.VISIBLE);//            farmerLay.setVisibility(View.VISIBLE);////        }//        getAllFarmName();//        allbindCrop();        String userTypeID = AppConstant.userTypeID;        Log.v("cscascsc", userTypeID + "====" + AppConstant.user_id);        if (userTypeID != null && (userTypeID.equalsIgnoreCase("1") || userTypeID.equalsIgnoreCase("2") || userTypeID.equalsIgnoreCase("18"))) {            binding.serviceHistory.setVisibility(View.VISIBLE);        } else {            // binding.orderHistory.setVisibility(View.GONE);            binding.serviceHistory.setVisibility(View.VISIBLE);        }        filterFarmer.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                farmerListMethod();            }        });//        filterProject.setOnClickListener(new View.OnClickListener() {//            @Override//            public void onClick(View v) {//                try {//                    new getStateProjectRefresh("Project", AppManager.getInstance().ProjectListURL(AppConstant.user_id)).execute();//                } catch (Exception ex) {//                    ex.printStackTrace();//                }//            }//        });//        if (db != null) {//            setProject();//            allbindCrop();//        }        setFarmValue();    }    @Override    protected int getActivityLayout() {        return R.layout.policylist;    }    private void getServiceMethod(final String proj_id) {        getCategoryDetailsMethod(proj_id, 1);    }    private void getCategoryDetailsMethod(String proj_id, int catID) {        // display a progress dialog        final ProgressDialog progressDialog = new ProgressDialog(this);        progressDialog.setCancelable(false); // set cancelable to false        progressDialog.setMessage(getResources().getString(R.string.Pleasewait)); // set message        progressDialog.show(); // show progress dialog        RequestCategoryBean requestCategoryBean = new RequestCategoryBean();        requestCategoryBean.setCategoryID(catID);        if (proj_id != null && proj_id.length() > 0) {            requestCategoryBean.setProjectID(Integer.parseInt(proj_id));        }        if (farmID != null && farmID.length() > 0) {            requestCategoryBean.setFarmID(Integer.parseInt(farmID));        }        if (cropID != null) {            requestCategoryBean.setCropID(Integer.parseInt(cropID));        }        if (state_id != null) {            requestCategoryBean.setStateID(Integer.parseInt(state_id));        }        if (district_id != null) {            requestCategoryBean.setDistrictID(Integer.parseInt(district_id));        }        AppController.getInstance().getApiServiceTest().getPolicyCategoryDetails(requestCategoryBean).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())                .subscribe(new ResponseObserver<Response<List<CategoryDetailResponse>>>(getCompositeDisposable()) {                    @Override                    public void onNetworkError(Throwable e) {                        progressDialog.cancel();                        showError(getDynamicLanguageValue(getApplicationContext(), "no_data", R.string.no_data));                        binding.productRecyclerView.setVisibility(View.GONE);                        binding.emptyView.setVisibility(View.VISIBLE);                        binding.title.setText(getDynamicLanguageValue(getApplicationContext(), "Currentlytherearenoproducts", R.string.Currentlytherearenoproducts));                    }                    @Override                    public void onServerError(Throwable e, int code) {                        progressDialog.cancel();                        showError(getDynamicLanguageValue(getApplicationContext(), "server_not_found", R.string.server_not_found));                        binding.productRecyclerView.setVisibility(View.GONE);                        binding.emptyView.setVisibility(View.VISIBLE);                        binding.title.setText(getDynamicLanguageValue(getApplicationContext(), "Currentlytherearenoproducts", R.string.Currentlytherearenoproducts));                    }                    @Override                    public void onNext(Response<List<CategoryDetailResponse>> response) {                        progressDialog.cancel();                        dataList = response.body();                        try {                            if (dataList != null && dataList.size() > 0) {                                binding.txtproductName.setVisibility(View.VISIBLE);                                binding.productRecyclerView.setVisibility(View.VISIBLE);                                binding.emptyView.setVisibility(View.GONE);                                binding.productRecyclerView.setHasFixedSize(true);                                ProductNewAdapter adapter = new ProductNewAdapter(PolicyList.this, PolicyList.this, dataList, SelectedCategoryValue, farmerId, farmID, cropID, cropName);                                binding.productRecyclerView.setLayoutManager(new LinearLayoutManager(PolicyList.this, LinearLayoutManager.VERTICAL, false));                                binding.productRecyclerView.setItemAnimator(new DefaultItemAnimator());                                binding.productRecyclerView.setAdapter(adapter);                            } else {                                binding.txtproductName.setVisibility(View.GONE);                                binding.productRecyclerView.setVisibility(View.GONE);                                binding.emptyView.setVisibility(View.VISIBLE);                                binding.title.setText(getDynamicLanguageValue(getApplicationContext(), "Currentlytherearenoproducts", R.string.Currentlytherearenoproducts));                            }                        } catch (Exception ex) {                            ex.printStackTrace();                        }                    }                });    }    //    @Override    public void onClick(CategoryDetailResponse value) {        if (value != null) {            db.open();            String quantityDb = "0";            int qt = 0;            Cursor selectedService = db.getCartByServiceId(value.getServiceID());            final int selectedServiceCount = selectedService.getCount();            if (selectedServiceCount > 0) {                selectedService.moveToFirst();                for (int i = 1; i <= selectedServiceCount; i++) {                    quantityDb = selectedService.getString(selectedService.getColumnIndex(DBAdapter.quantity));                    selectedService.moveToNext();                }                if (quantityDb != null && value.getQuantity() > 0) {                    qt = Integer.parseInt(quantityDb) + value.getQuantity();                }                Log.v("vsdvsdvs", selectedServiceCount + "==" + quantityDb + "====" + value.getQuantity() + "=====" + qt);                db.updateCartByServiceId(value.getServiceID(), "" + qt);                db.close();            } else {                if (quantityDb != null) {                    qt = Integer.parseInt(quantityDb) + value.getQuantity();                }                ContentValues values = new ContentValues();                values.put(DBAdapter.ProductDescription, value.getProductDescription());                values.put(DBAdapter.ImagePath, value.getImagePath());                values.put(DBAdapter.BrandName, value.getBrandName());                values.put(DBAdapter.ProductUnit, value.getProductUnit());                values.put(DBAdapter.quantityUnit, value.getQuantityUnit());                values.put(DBAdapter.serviceID, value.getServiceID());                values.put(DBAdapter.startDate, value.getStartDate());                values.put(DBAdapter.endDate, value.getEndDate());                values.put(DBAdapter.price, value.getPrice());                values.put(DBAdapter.service, value.getService());                values.put(DBAdapter.quantity, qt);                db.db.insert(DBAdapter.TABLE_CART, null, values);                db.close();            }        }    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        if (ev.getAction() == MotionEvent.ACTION_DOWN) {            View v = getCurrentFocus();            if (v instanceof EditText) {                EditText edit = ((EditText) v);                Rect outR = new Rect();                edit.getGlobalVisibleRect(outR);                Boolean isKeyboardOpen = !outR.contains((int) ev.getRawX(), (int) ev.getRawY());                System.out.print("Is Keyboard? " + isKeyboardOpen);                if (isKeyboardOpen) {                    System.out.print("Entro al IF");                    edit.clearFocus();                    InputMethodManager imm = (InputMethodManager) this.getSystemService(Context.INPUT_METHOD_SERVICE);                    imm.hideSoftInputFromWindow(edit.getWindowToken(), 0);                }                edit.setCursorVisible(!isKeyboardOpen);            }        }        return super.dispatchTouchEvent(ev);    }    public void getAllFarmName() {        db = new DBAdapter(this);        System.out.println("getAllFarmCalled");        str = new ArrayList<String>();        strFarmId = new ArrayList<String>();        FarmDetailsList = new ArrayList<>();        if ((AppConstant.userTypeID != null/* && !AppConstant.userTypeID.equalsIgnoreCase("5")*/)) {            str.add("Select farm");            strFarmId.add("0");//            FarmDetailsList.add(null);        }        Log.v("userTypeID", AppConstant.userTypeID + "");        db.open();        Cursor c = db.getallFarmName(AppConstant.user_id);        if (c.moveToFirst()) {            do {                try {                    str.add(c.getString(0).toString() + " - " + c.getString(1).toString());                    strFarmId.add(c.getString(1).toString());//                    HashMap<String, String> hashMap = new HashMap<>();//                    hashMap.put("farmName", c.getString(0));//                    hashMap.put("farmId", c.getString(1));//                    hashMap.put("contour", c.getString(2));//                    hashMap.put("centerLat", c.getString(3));//                    hashMap.put("centreLon", c.getString(4));//                    FarmDetailsList.add(hashMap);                } catch (Exception ex) {                    ex.printStackTrace();                }            } while (c.moveToNext());        }        db.close();//        try {//            List<MyItem> items = new ArrayList<>();//            items.add(new MyItem("Item 1"));//            items.add(new MyItem("Item 2"));//            items.add(new MyItem("Item 3"));//            items.add(new MyItem(new LatLng(1.289545, 103.849972)));//            items.add(new MyItem("Item 4"));//            items.add(new MyItem("Item 5"));//            items.add(new MyItem("Item 6"));//            items.add(new MyItem("Item 7"));//            items.add(new MyItem("Item 8"));//            items.add(new MyItem("Item 9"));//            binding.farmDetailsRecyclerView.setHasFixedSize(true);//            PolicyListFarmerAdapter adapter = new PolicyListFarmerAdapter(this, PolicyList.this, FarmDetailsList,items);//            binding.farmDetailsRecyclerView.setLayoutManager(new LinearLayoutManager(PolicyList.this, LinearLayoutManager.VERTICAL, false));//            binding.farmDetailsRecyclerView.setItemAnimator(new DefaultItemAnimator());//            binding.farmDetailsRecyclerView.setAdapter(adapter);//        } catch (Exception ex) {//            ex.printStackTrace();//        }        ArrayAdapter<String> chooseYourFarmAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, str);        farmSpinner.setAdapter(chooseYourFarmAdapter);        farmSpinner.setOnItemSelectedListener(                new AdapterView.OnItemSelectedListener() {                    @Override                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {//                        Log.v("Adsdsds", AppConstant.userTypeID);//                        SelectFarmDetails_policy = new JSONObject();                        binding.txtproductName.setVisibility(View.GONE);                        binding.productRecyclerView.setVisibility(View.GONE);                        if ((AppConstant.userTypeID != null && !AppConstant.userTypeID.equalsIgnoreCase("5"))) {                            if (position > 0) {                                farmerLay.setVisibility(View.GONE);                                farmerId = null;                                if (connectionDetector.isConnectingToInternet()) {                                    String farmName = str.get(position);                                    String farmIDd = strFarmId.get(position);                                    Log.v("farm_id_selected", "" + farmIDd);//                                new getca(farmID).execute();                                    if (farmIDd != null && !farmIDd.equalsIgnoreCase("0")) {                                        new FarmdetailsAsynctask(farmIDd).execute();                                    } else {                                        farmerLay.setVisibility(View.VISIBLE);                                        farmerId = null;                                        farmID = null;                                    }                                } else {                                    noInternetMethoddd();                                }                            } else {                                farmerLay.setVisibility(View.VISIBLE);                                farmerId = null;                                farmID = null;                            }                        } else {                            if (connectionDetector.isConnectingToInternet()) {                                farmerLay.setVisibility(View.GONE);                                farmerId = null;                                String farmName = str.get(position);                                String farmIDd = strFarmId.get(position);                                Log.v("farm_id_selected", "" + farmID);//                                new getca(farmID).execute();                                if (farmIDd != null && !farmIDd.equalsIgnoreCase("0")) {                                    new FarmdetailsAsynctask(farmIDd).execute();                                } else {                                    farmerLay.setVisibility(View.VISIBLE);                                    farmerId = null;                                    farmID = null;                                }                            } else {                                noInternetMethoddd();                            }                        }                    }                    @Override                    public void onNothingSelected(AdapterView<?> parent) {                        farmerLay.setVisibility(View.VISIBLE);                        farmerId = null;                        farmID = null;                    }                }        );    }    private void noInternetMethoddd() {        AlertDialog.Builder builder = new AlertDialog.Builder(PolicyList.this);        builder.setTitle(getDynamicLanguageValue(getApplicationContext(), "InternetError", R.string.InternetError)).                setMessage(getDynamicLanguageValue(getApplicationContext(), "Doyouwantrefresh", R.string.Doyouwantrefresh)).                setPositiveButton(getDynamicLanguageValue(getApplicationContext(), "Yes", R.string.Yes), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        dialogInterface.cancel();                        Intent gps = new Intent(                                Settings.ACTION_WIFI_SETTINGS);                        startActivity(gps);//                        if (USERID != null) {//                            subDistrictLay.setVisibility(View.GONE);//                            loadDistData(USERID);//                        } else {//                            Toast.makeText(FarmVisitAcitivity.this, getResources().getString(R.string.Useriddoesnotfound), Toast.LENGTH_SHORT).show();//                        }                    }                }).                setNegativeButton(getDynamicLanguageValue(getApplicationContext(), "No", R.string.No), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        dialogInterface.cancel();                    }                });        AlertDialog dialog = builder.create();        dialog.show();    }    private class FarmdetailsAsynctask extends AsyncTask<Void, Void, String> {        String FarmID = "";        public FarmdetailsAsynctask(String farmid) {            FarmID = farmid;        }        ProgressDialog progressDialog;        @Override        protected void onPreExecute() {            super.onPreExecute();            progressDialog = new ProgressDialog(PolicyList.this);            progressDialog.setMessage(getDynamicLanguageValue(getApplicationContext(), "Dataisloading", R.string.Dataisloading));            progressDialog.setCancelable(false);            progressDialog.setIndeterminate(true);            progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {                @Override                public void onCancel(DialogInterface dialog) {                    // cancel AsyncTask                    cancel(false);                }            });            progressDialog.show();        }        @Override        protected String doInBackground(Void... params) {            String sendRequest = null;            try {                sendRequest = AppManager.getInstance().getFarmData + AppConstant.user_id + "/" + FarmID;                String response = AppManager.getInstance().httpRequestGetMethod(sendRequest);                return response;            } catch (Exception ex) {                ex.printStackTrace();            }            return sendRequest;        }        @Override        protected void onPostExecute(String response) {            super.onPreExecute();            try {                if (response != null && response.contains("FarmID")) {                    progressDialog.dismiss();                    Log.v("sacascascas", response);                    if (response != null && response.contains("armerID")) {                        try {                            JSONObject obj = new JSONObject(response);                            SelectFarmDetails_policy = obj;                            farmerId = obj.getString("FarmerID");                            projectID = obj.getString("ProjectID");                            farmID = obj.getString("FarmID");                            if (obj.has("CropInfo")) {                                JSONArray jsonArray = obj.getJSONArray("CropInfo");                                if (jsonArray != null && jsonArray.length() > 0) {                                    if (jsonArray.getJSONObject(0).has("CropID")) {                                        cropID = jsonArray.getJSONObject(0).getString("CropID");                                        cropName = jsonArray.getJSONObject(0).getString("CropName");                                    }                                }                            }                            Log.v("csccssss", farmerId + "====" + cropID);                            Log.v("CropName", farmerId + "====" + cropName);                        } catch (Exception ex) {                            ex.printStackTrace();                            SelectFarmDetails_policy = new JSONObject();                        }                    }                    binding.productRecyclerView.setVisibility(View.GONE);                    getServiceMethod(projectID);                    getFarmerDetailsMethod(farmerId, 1);                }            } catch (Exception ex) {                ex.printStackTrace();            }        }    }    @Override    public void hideKeyboard() {        super.hideKeyboard();    }    public void allbindCrop() {        int cropselectedposition = 0;        db.open();        Crops = new ArrayList<>();        ArrayList<HashMap<String, String>> hasmap = new ArrayList<>();//        String sql = "select * from crop_variety where state_id='" + state_id + "' group by cropid order by crop";        String sql = "select * from crop_variety where state_id='" + AppConstant.stateID + "' group by cropid order by crop";        hasmap = db.getDynamicTableValue(sql);        ArrayList<String> list = new ArrayList<>();        HashMap<String, String> hash = new HashMap<>();        hash.put("cropId", "0");        hash.put("crop", getDynamicLanguageValue(getApplicationContext(), "Select", R.string.Select));        Crops.add(hash);        list.add(getDynamicLanguageValue(getApplicationContext(), "Select", R.string.Select));        if (hasmap.size() > 0) {            for (int i = 1; i <= hasmap.size(); i++) {                HashMap<String, String> hashMap = new HashMap<>();                hashMap.put("cropId", hasmap.get(i - 1).get("cropId"));                list.add(hasmap.get(i - 1).get("crop"));                hashMap.put("crop", hasmap.get(i - 1).get("crop"));                Crops.add(hashMap);                if (cropID != null && hasmap.get(i - 1).get("cropId") != null && cropID.equalsIgnoreCase(hasmap.get(i - 1).get("cropId").toString())) {                    cropselectedposition = i;                }            }        }        try {            ArrayAdapter<String> cropArrayAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, list);            cropSpinner.setAdapter(cropArrayAdapter);            setCustomSearchableSpinner(getApplicationContext(),cropSpinner,"SelectCrop", R.string.SelectCrop);//            cropSpinner.setTitle(getDynamicLanguageValue(getApplicationContext(), "SelectCrop", R.string.SelectCrop));            if (cropselectedposition != 0) {                cropSpinner.setSelection(cropselectedposition);            }            cropSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                    try {                        if (position > 0) {                            cropID = Crops.get(position).get("cropId");                            cropName = Crops.get(position).get("crop");//                                binding.productRecyclerView.setVisibility(View.GONE);//                                getServiceMethod(projectID);                        } else {                            cropID = "0";                            cropName = "";//                        binding.productRecyclerView.setVisibility(View.GONE);                        }                    } catch (Exception ex) {                        ex.printStackTrace();                    }                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                }            });        } catch (Exception ex) {            ex.printStackTrace();        }    }    public void farmerListMethod() {        VillageID = null;        dialog = new Dialog(this);        //  final Dialog dialog = new Dialog(getActivity());        dialog.setCanceledOnTouchOutside(false);        Window window = dialog.getWindow();        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        WindowManager.LayoutParams wlp = window.getAttributes();        wlp.gravity = Gravity.CENTER;        wlp.dimAmount = 0.5f;        dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);        // wlp.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;        window.setAttributes(wlp);        // Include dialog.xml file        dialog.setContentView(R.layout.search_farmer_popup);        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);        ImageView crossBTN = (ImageView) dialog.findViewById(R.id.crossbtn);        crossBTN.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (dialog != null) {                    dialog.cancel();                }            }        });        Button submitBTN = (Button) dialog.findViewById(R.id.submit);        spin_state = (Spinner) dialog.findViewById(R.id.spinState);        spin_district = (Spinner) dialog.findViewById(R.id.spinDistrict);        spin_subdistrict = (Spinner) dialog.findViewById(R.id.spinSubdistrict);        spin_villageName = (Spinner) dialog.findViewById(R.id.spinVillageName);        final EditText edtAadharNo = (EditText) dialog.findViewById(R.id.edtAadharNo);        final EditText edtMobileNo = (EditText) dialog.findViewById(R.id.edtMobileNo);        if (spin_state != null && spin_district != null && spin_subdistrict != null && spin_villageName != null) {            setStateBind();        }        submitBTN.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String adharN = edtAadharNo.getText().toString().trim();                String phn = edtMobileNo.getText().toString().trim();                if (adharN.length() == 12 || phn.length() == 10 || VillageID != null) {                    getFarmerListMethod(phn, adharN);                } else {                    getDynamicLanguageToast(getApplicationContext(), "PleaseenterthevalidAadhar", R.string.PleaseenterthevalidAadhar);                }            }        });        dialog.show();    }    public void setStateBind() {        db.open();        States = new ArrayList<>();        ArrayList<HashMap<String, String>> hasmap = new ArrayList<>();        hasmap = db.getDynamicTableValue("select ID,StateID,Upper(StateName) as StateName,DistrictID,Upper(DistrictName) as DistrictName from MstStateDistrict where StateID!='' and StateName!='' group by StateID order by StateName");        ArrayList<String> list = new ArrayList<>();        HashMap<String, String> hash = new HashMap<>();        hash.put("StateID", "0");        hash.put("StateName", "Select State");        States.add(hash);        list.add("Select State");        if (hasmap.size() > 0) {            for (int i = 1; i <= hasmap.size(); i++) {                HashMap<String, String> hashMap = new HashMap<>();                hashMap.put("StateID", hasmap.get(i - 1).get("StateID"));                list.add(hasmap.get(i - 1).get("StateName"));                hashMap.put("StateName", hasmap.get(i - 1).get("StateName"));                States.add(hashMap);            }        }        ArrayAdapter<String> stateListAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, list);        spin_state.setAdapter(stateListAdapter);        spin_state.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {                if (position > 0 && States.size() > 0) {                    try {                        //State                        StateID = States.get(position).get("StateID");                        StateName = States.get(position).get("StateName");//                        setCropsBind();//                        allbindCrop();                        if (spin_district != null && spin_subdistrict != null && spin_villageName != null) {                            setDitrictBind(StateID);                        }                    } catch (Exception ex) {                        ex.printStackTrace();                    }                } else {                    StateID = "0";                    StateName = "";                }            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {            }        });        db.close();    }    public void setDitrictBind(String State_id) {        db.open();        Districts = new ArrayList<>();        ArrayList<HashMap<String, String>> hasmap = new ArrayList<>();        hasmap = db.getDynamicTableValue("select ID,StateID,Upper(StateName) as StateName,DistrictID,Upper(DistrictName) as DistrictName from MstStateDistrict where StateID='" + State_id + "' and DistrictID!='' and DistrictName!='' group by DistrictID order by DistrictName");        ArrayList<String> list = new ArrayList<>();        HashMap<String, String> hash = new HashMap<>();        hash.put("DistrictID", "0");        hash.put("DistrictName", "Select District");        Districts.add(hash);        list.add("Select District");        if (hasmap.size() > 0) {            for (int i = 1; i <= hasmap.size(); i++) {                HashMap<String, String> hashMap = new HashMap<>();                hashMap.put("DistrictID", hasmap.get(i - 1).get("DistrictID"));                list.add(hasmap.get(i - 1).get("DistrictName"));                hashMap.put("DistrictName", hasmap.get(i - 1).get("DistrictName"));                Districts.add(hashMap);            }        }        ArrayAdapter<String> stateListAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, list);        spin_district.setAdapter(stateListAdapter);        spin_district.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {                if (position > 0 && Districts.size() > 0) {                    DistrictID = Districts.get(position).get("DistrictID");                    DistrictName = Districts.get(position).get("DistrictName");                    if (spin_subdistrict != null && spin_villageName != null) {                        getAPIURL(3, DistrictID, DistrictName);                    }                } else {                    DistrictID = "0";                    DistrictName = "";                }            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {            }        });        db.close();    }    public void getAPIURL(int flag, String ID, String Name) {        String URL = "";        switch (flag) {//            case 1://State//                URL = "https://myfarminfo.com/yfirest.svc/Clients/GetAllStates/2";//                break;//            case 2://District//                URL = "https://myfarminfo.com/yfirest.svc/Clients/GetStateDistrict/" + ID;//                break;            case 3://Sub District                URL = "https://myfarminfo.com/yfirest.svc/Clients/GetDistrictsubdistrict/" + ID;                break;            case 4://Village                URL = "https://myfarminfo.com/yfirest.svc/Clients/GetsubdistrictVillage/" + ID + "/" + Name;                break;        }        new getStateDistVillage(flag, URL).execute();    }    private class getStateDistVillage extends AsyncTask<Void, Void, String> {        int flag = 0;        String URL = "";        TransparentProgressDialog progressDialog;        public getStateDistVillage(int flags, String URLs) {            flag = flags;            URL = URLs;        }        @Override        protected void onPreExecute() {            super.onPreExecute();            String sms = "";            switch (flag) {//                case 1://State//                    progressDialog.setMessage(getResources().getString(R.string.LoadingStates));//                    break;//                case 2://District//                    progressDialog.setMessage(getResources().getString(R.string.LoadingDistricts));//                    break;                case 3://Sub District                    sms = getDynamicLanguageValue(getApplicationContext(), "LoadingSubDistricts", R.string.LoadingSubDistricts);                    break;                case 4://Village                    sms = getDynamicLanguageValue(getApplicationContext(), "LoadingVillages", R.string.LoadingVillages);                    break;            }            progressDialog = new TransparentProgressDialog(                    PolicyList.this, sms);            progressDialog.setCancelable(false);            progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {                @Override                public void onCancel(DialogInterface dialog) {                    // cancel AsyncTask                    cancel(false);                }            });            progressDialog.show();        }        @Override        protected String doInBackground(Void... params) {            try {                String response = AppManager.getInstance().httpRequestGetMethod(URL);                return AppManager.getInstance().RemoveStringUnwanted(response);            } catch (Exception ex) {                ex.printStackTrace();                return null;            }        }        @Override        protected void onPostExecute(String result) {            super.onPreExecute();            if (result.equalsIgnoreCase("No Data") || result.equalsIgnoreCase("Could not connect to server")) {                switch (flag) {//                    case 1://State//                        States = null;//                        AppConstant.state = "";//                        AppConstant.stateID = "";//                        SetSpinner(flag, stateList, States);//                        break;//                    case 2://District//                        Districts = null;//                        DistrictName = null;//                        DistrictID = null;//                        SetSpinner(flag, DistrictName_spin, Districts);//                        //Sub District//                        SubDistricts = null;//                        SubDistrictName = null;//                        SubDistrictID = null;//                        SetSpinner(flag, SubDistrictName_spin, SubDistricts);//                        //Village//                        Villages = null;//                        VillageName = null;//                        VillageID = null;//                        SetSpinner(flag, VillageName_spin, Villages);//                        break;                    case 3://Sub District                        SubDistricts = null;                        SubDistrictName = null;                        SubDistrictID = null;                        if (spin_subdistrict != null && spin_villageName != null) {                            SetSpinner(flag, spin_subdistrict, SubDistricts);                        }                        //Village                        Villages = null;                        VillageName = null;                        VillageID = null;                        if (spin_subdistrict != null && spin_villageName != null) {                            SetSpinner(flag, spin_villageName, Villages);                        }                        break;                    case 4://Village                        Villages = null;                        VillageName = null;                        VillageID = null;                        if (spin_villageName != null) {                            SetSpinner(flag, spin_villageName, Villages);                        }                        break;                }//                Toast.makeText(getApplicationContext(), getResources().getString(R.string.Nodataavailable), Toast.LENGTH_LONG).show();            } else {                try {                    //stateList,DistrictName_spin,SubDistrictName_spin,VillageName_spin                    switch (flag) {//                        case 1://State//                            JSONObject json = new JSONObject(result.toString());//                            JSONArray jsonArray_State = json.getJSONArray("DT");//                            States = getStateDistrictValues(flag, jsonArray_State.toString());//                            SetSpinner(flag, stateList, States);//                            break;//                        case 2://District//                            JSONArray jsonArray_Districts = new JSONArray(result.toString());//                            Districts = getStateDistrictValues(flag, jsonArray_Districts.toString());//                            SetSpinner(flag, DistrictName_spin, Districts);//                            break;                        case 3://Sub District                            JSONArray jsonArray_SubDistricts = new JSONArray(result.toString());                            SubDistricts = getStateDistrictValues(flag, jsonArray_SubDistricts.toString());                            if (spin_subdistrict != null && spin_villageName != null) {                                SetSpinner(flag, spin_subdistrict, SubDistricts);                            }                            break;                        case 4://Village                            JSONArray jsonArray_Villages = new JSONArray(result.toString());                            Villages = getStateDistrictValues(flag, jsonArray_Villages.toString());                            if (spin_villageName != null) {                                SetSpinner(flag, spin_villageName, Villages);                            }                            break;                    }                } catch (Exception e) {                    e.printStackTrace();                    getDynamicLanguageToast(getApplicationContext(), "Couldnotconnect", R.string.Couldnotconnect);                }            }            progressDialog.dismiss();        }    }    public ArrayList<HashMap<String, String>> getStateDistrictValues(int flag, String JsonValues) {        ArrayList<HashMap<String, String>> values = new ArrayList<>();        JSONArray jsonArray = null;        try {            jsonArray = new JSONArray(JsonValues);        } catch (Exception ex) {            ex.printStackTrace();        }        switch (flag) {            case 1://State                for (int i = 0; i < jsonArray.length(); i++) {                    try {                        JSONObject obj = jsonArray.getJSONObject(i);                        String StateID = "", StateName = "";                        StateID = obj.getString("StateID");                        StateName = obj.getString("StateName");                        HashMap<String, String> setval = new HashMap<>();                        setval.put("StateID", StateID);                        setval.put("StateName", StateName);                        values.add(setval);                    } catch (Exception ex) {                        ex.printStackTrace();                    }                }                break;            case 2://District                for (int i = 0; i < jsonArray.length(); i++) {                    try {                        JSONObject obj = jsonArray.getJSONObject(i);                        String DistrictID = "", District = "";                        DistrictID = obj.getString("DistrictID");                        District = obj.getString("District");                        HashMap<String, String> setval = new HashMap<>();                        setval.put("DistrictID", DistrictID);                        setval.put("District", District);                        values.add(setval);                    } catch (Exception ex) {                        ex.printStackTrace();                    }                }                break;            case 3://Sub District                for (int i = 0; i < jsonArray.length(); i++) {                    try {                        JSONObject obj = jsonArray.getJSONObject(i);                        String Sub_district = "", Sub_district_Pos = "";                        Sub_district = obj.getString("Sub_district");                        Sub_district_Pos = String.valueOf(i);                        HashMap<String, String> setval = new HashMap<>();                        setval.put("Sub_district", Sub_district);                        setval.put("Sub_district_Pos", Sub_district_Pos);                        values.add(setval);                    } catch (Exception ex) {                        ex.printStackTrace();                    }                }                break;            case 4://Village                for (int i = 0; i < jsonArray.length(); i++) {                    try {                        JSONObject obj = jsonArray.getJSONObject(i);                        String Village_Final = "", Village_ID = "";                        Village_Final = obj.getString("Village_Final");                        Village_ID = obj.getString("Village_ID");                        HashMap<String, String> setval = new HashMap<>();                        setval.put("Village_Final", Village_Final);                        setval.put("Village_ID", Village_ID);                        values.add(setval);                    } catch (Exception ex) {                        ex.printStackTrace();                    }                }                break;        }        return values;    }    public void SetSpinner(final int flag, Spinner spinner, ArrayList<HashMap<String, String>> value) {        final ArrayList<String> getValue = new ArrayList();        final ArrayList<String> getIDs = new ArrayList();        if (value != null) {            switch (flag) {                case 1://State                    for (int i = 0; i < value.size(); i++) {                        getValue.add(value.get(i).get("StateName"));                        getIDs.add(value.get(i).get("StateID"));                    }                    break;                case 2://District                    for (int i = 0; i < value.size(); i++) {                        getValue.add(value.get(i).get("District"));                        getIDs.add(value.get(i).get("DistrictID"));                    }                    break;                case 3://Sub District                    getValue.add("Select Sub District");                    getIDs.add("0");                    for (int i = 0; i < value.size(); i++) {                        getValue.add(value.get(i).get("Sub_district"));                        getIDs.add(value.get(i).get("Sub_district_Pos"));                    }                    break;                case 4://Village                    getValue.add("Select Village");                    getIDs.add("0");                    for (int i = 0; i < value.size(); i++) {                        getValue.add(value.get(i).get("Village_Final"));                        getIDs.add(value.get(i).get("Village_ID"));                    }                    break;            }        }        ArrayAdapter<String> stateListAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, getValue);        spinner.setAdapter(stateListAdapter);        db.close();        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {//                if (position > 0) {                try {                    switch (flag) {                        case 3://Sub District                            if (getValue.size() > 0) {                                SubDistrictID = getIDs.get(position);                                SubDistrictName = getValue.get(position);                            } else {                                SubDistrictID = null;                                SubDistrictName = null;                            }                            if (spin_villageName != null) {                                getAPIURL(4, DistrictID, SubDistrictName);                            }                            break;                        case 4://Village                            if (getValue.size() > 0) {                                VillageID = getIDs.get(position);                                VillageName = getValue.get(position);                            } else {                                VillageID = null;                                VillageName = null;                            }                            break;                    }                } catch (Exception ex) {                    ex.printStackTrace();                }//                }            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {            }        });    }    private void getFarmerListMethod(String phNo, String aadharN) {        // display a progress dialog        final ProgressDialog progressDialog = new ProgressDialog(this);        progressDialog.setCancelable(false); // set cancelable to false        progressDialog.setMessage(getDynamicLanguageValue(getApplicationContext(), "Pleasewait", R.string.Pleasewait)); // set message        progressDialog.show(); // show progress dialog        FarmerListRequest request = new FarmerListRequest();        if (phNo != null) {            request.setPhoneNumber(phNo);        }        if (aadharN != null) {            request.setAdhaar(aadharN);        }        if (VillageID != null && VillageID.length() > 0) {            request.setVillageID(Integer.valueOf(VillageID));        }        apiService.getFarmerList(request).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())                .subscribe(new ResponseObserver<Response<List<FarmerResponse>>>(getCompositeDisposable()) {                    @Override                    public void onNetworkError(Throwable e) {                        progressDialog.cancel();                        Log.v("wvqevqevqe", e.getMessage() + " " + e.toString());                        showError(getDynamicLanguageValue(getApplicationContext(), "no_data", R.string.no_data));                    }                    @Override                    public void onServerError(Throwable e, int code) {                        progressDialog.cancel();                        showError(getDynamicLanguageValue(getApplicationContext(), "server_not_found", R.string.server_not_found));                    }                    @Override                    public void onNext(Response<List<FarmerResponse>> response) {                        progressDialog.cancel();                        List<FarmerResponse> responsesData = response.body();                        if (responsesData != null && responsesData.size() > 0) {                            if (dialog != null) {                                dialog.cancel();                            }                            strFarmer = new ArrayList<String>();                            strFarmerId = new ArrayList<Integer>();                            if (responsesData.size() > 1) {                                strFarmer.add("select farmer");                                strFarmerId.add(0);                            }                            for (int i = 0; i < responsesData.size(); i++) {                                if (responsesData.get(i).getFarmerPersonelID() != null && responsesData.get(i).getFarmerPersonelID() > 0) {                                    strFarmer.add(responsesData.get(i).getFarmerName());                                    strFarmerId.add(responsesData.get(i).getFarmerPersonelID());                                }                            }                            farmerId = null;                            if (strFarmer.size() > 0) {                                bindFarmerSpiner();                            }                        } else {                            getDynamicLanguageToast(getApplicationContext(), "Nofarmerisfound", R.string.Nofarmerisfound);                        }                    }                });    }    public void bindFarmerSpiner() {        ArrayAdapter<String> chooseYourFarmAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, strFarmer);        farmerSpinner.setAdapter(chooseYourFarmAdapter);        farmerSpinner.setOnItemSelectedListener(                new AdapterView.OnItemSelectedListener() {                    @Override                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                        Log.v("Adsdsds", AppConstant.userTypeID);                        if (position >= 0 && strFarmerId.get(position) > 0) {                            binding.productRecyclerView.setVisibility(View.GONE);                            farmerId = "" + strFarmerId.get(position);                            getFarmerDetailsMethod(farmerId, 0);                        }                    }                    @Override                    public void onNothingSelected(AdapterView<?> parent) {                        farmerId = null;                    }                }        );    }    private void getFarmerDetailsMethod(final String fId, int flag) {        // display a progress dialog        final ProgressDialog progressDialog = new ProgressDialog(this);        progressDialog.setCancelable(false); // set cancelable to false        progressDialog.setMessage(getDynamicLanguageValue(getApplicationContext(), "Pleasewait", R.string.Pleasewait)); // set message        progressDialog.show(); // show progress dialog        FarmerListRequest request = new FarmerListRequest();        // request.setProjectID(pId);        request.setFarmerPersonelID(Integer.valueOf(fId));        apiService.getFarmerDetails(request).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())                .subscribe(new ResponseObserver<Response<FarmerDetailsResponse>>(new CompositeDisposable()) {                    @Override                    public void onNetworkError(Throwable e) {                        progressDialog.cancel();                        Log.v("wvqevqevqe", e.getMessage() + " " + e.toString());                    }                    @Override                    public void onServerError(Throwable e, int code) {                        progressDialog.cancel();                    }                    @Override                    public void onNext(Response<FarmerDetailsResponse> response) {                        progressDialog.cancel();                        FarmerDetailsResponse responsesData = response.body();                        if (responsesData != null && responsesData.getFarmerpersonalData() != null && responsesData.getFarmerpersonalData().size() > 0) {                            if (flag == 0) {                                SelectFarmerDetails_policy = responsesData;                                state_id = responsesData.getFarmerpersonalData().get(0).getStateID();                                district_id = responsesData.getFarmerpersonalData().get(0).getDistrictID();                            } else {                                SelectFarmerDetails_policy = responsesData;                            }                            allbindCrop();                        } else {                            SelectFarmerDetails_policy = new FarmerDetailsResponse();                        }                    }                });    }//    private class getStateProjectRefresh extends AsyncTask<Void, Void, String> {////        String flag = "";//        String URL = "";//        TransparentProgressDialog progressDialog;////        public getStateProjectRefresh(String flags, String URLs) {//            flag = flags;//            URL = URLs;//        }////        @Override//        protected void onPreExecute() {//            super.onPreExecute();//            String sms = "";//            switch (flag) {//                case "Project"://State//                    sms = getResources().getString(R.string.LoadingProject);//                    break;//                case "StateDistrict"://District//                    sms = getResources().getString(R.string.Loadingstate);//                    break;//                case "Crops"://District//                    sms = getResources().getString(R.string.LoadingCrops);//                    break;////            }//            progressDialog = new TransparentProgressDialog(PolicyList.this, sms);//            progressDialog.setCancelable(false);//            progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {//                @Override//                public void onCancel(DialogInterface dialog) {//                    // cancel AsyncTask//                    cancel(false);//                }//            });//            progressDialog.show();//        }////        @Override//        protected String doInBackground(Void... params) {//            try {//                String response = AppManager.getInstance().httpRequestGetMethod(URL);//                return "[" + response + "]";////            } catch (Exception ex) {//                ex.printStackTrace();//                return null;//            }////        }////        @Override//        protected void onPostExecute(String response) {//            super.onPreExecute();//            if (response != null) {//                switch (flag) {//                    case "Project"://                        response = response.trim();//                        response = response.substring(1, response.length() - 1);//                        response = response.replace("\\", "");//                        db.open();//                        db.getSQLiteDatabase().execSQL("DROP TABLE IF EXISTS " + db.TABLE_Projectlist);//                        db.getSQLiteDatabase().execSQL(db.CREATE_TABLE_Projectlist);//                        io.requery.android.database.sqlite.SQLiteDatabase SqliteDB = db.getSQLiteDatabase();//                        SqliteDB.beginTransaction();//                        try {//                            JSONArray jsonArray = new JSONArray(response);//                            for (int i = 0; i < jsonArray.length(); i++) {//                                JSONObject obj = new JSONObject(jsonArray.get(i).toString());//                                String query = "INSERT INTO " + DBAdapter.TABLE_Projectlist + "(ProjectID,ProjectName) VALUES ('" + obj.get("ID").toString() + "','" + obj.get("Name").toString() + "')";//                                db.getSQLiteDatabase().execSQL(query);//                            }////                        } catch (Exception e) {//                            e.printStackTrace();//                            Toast.makeText(PolicyList.this, getResources().getString(R.string.FormattingError), Toast.LENGTH_LONG).show();//                        }//                        SqliteDB.setTransactionSuccessful();//                        SqliteDB.endTransaction();//                        db.getClass();//                        setProject();//                        break;////                }////            } else//                Toast.makeText(PolicyList.this, getResources().getString(R.string.Nodataavailable), Toast.LENGTH_LONG).show();//            progressDialog.dismiss();//        }//    }//    public void setProject() {//        db.open();//        Projects = new ArrayList<>();//        ArrayList<HashMap<String, String>> hasmap = new ArrayList<>();//        hasmap = db.getDynamicTableValue("Select * from " + db.TABLE_Projectlist + " order by ProjectName");//        ArrayList<String> list = new ArrayList<>();//        HashMap<String, String> hash = new HashMap<>();//        hash.put("ProjectID", "0");//        hash.put("ProjectName", "Select Project");//        Projects.add(hash);//        list.add("Select Project");//        if (hasmap.size() > 0) {//            for (int i = 1; i <= hasmap.size(); i++) {//                HashMap<String, String> hashMap = new HashMap<>();//                hashMap.put("ProjectID", hasmap.get(i - 1).get("ProjectID"));//                list.add(hasmap.get(i - 1).get("ProjectName"));//                hashMap.put("ProjectName", hasmap.get(i - 1).get("ProjectName"));//                Projects.add(hashMap);//            }//        }//        ArrayAdapter<String> stateListAdapter = new ArrayAdapter<String>(this, R.layout.spinner_layout, list);//        projectSpinner.setAdapter(stateListAdapter);//        projectSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {//            @Override//            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {//                if (position > 0 && Projects.size() > 0) {//                    projectID = Projects.get(position).get("ProjectID");//                    projectName = Projects.get(position).get("ProjectName");//                } else {//                    projectID = "0";//                    projectName = "";//                }//            }////            @Override//            public void onNothingSelected(AdapterView<?> adapterView) {//            }//        });//        db.close();//    }    public void setFarmValue() {        try {            Bundle bundle = getIntent().getExtras();            if (bundle != null && bundle.size() > 0) {                farmerId = bundle.getString("FarmerID");                projectID = bundle.getString("ProjectID");                farmID = bundle.getString("farmID");                cropID = bundle.getString("cropID");                cropName = bundle.getString("CropName");            }            getServiceMethod(projectID);            getFarmerDetailsMethod(farmerId, 1);        } catch (Exception ex) {            ex.printStackTrace();        }    }    @Override    protected void onResume() {        super.onResume();        setLanguages();    }    public void setLanguages() {        //Heading        setFontsStyleTxt(this, binding.txtFarmRegistration, 2);        setFontsStyleTxt(this, binding.txtCrop, 5);        setFontsStyleTxt(this, binding.txtproductName, 5);        setFontsStyleTxt(this, binding.title, 5);        setFontsStyleTxt(this, binding.txtFarmer, 5);        setFontsStyleTxt(this, binding.txtFarms, 5);        setFontsStyleTxt(this, binding.serviceHistory, 5);        //Tab Service        setDynamicLanguage(this, binding.txtFarmRegistration, "PolicyList", R.string.PolicyList);        setDynamicLanguage(this, binding.txtCrop, "Crop", R.string.Crop);        setDynamicLanguage(this, binding.txtproductName, "YeildAssurance", R.string.YeildAssurance);        setDynamicLanguage(this, binding.txtFarmer, "Farmer", R.string.Farmer);        setDynamicLanguage(this, binding.txtFarms, "Farms", R.string.Farms);        setDynamicLanguage(this, binding.serviceHistory, "PolicyHistory", R.string.PolicyHistory);    }}